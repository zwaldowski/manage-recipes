schema {
  query: QueryRoot
  mutation: MutationRoot
}

"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""Configuration parameters for A La Carte (aka Freebird) subscriptions."""
type ALaCarteConfig {
  """Whether or not this user has an a la carte subscription type."""
  enabled: Boolean!

  """
  Redirect parameters for mobile A La Carte users. Tells clients how to render an unavailable message if needed.
  """
  mobileRedirect: ALaCarteRedirect!
}

"""
Configuration parameters for a mobile redirect dialog for A La Carte users. Note - this probably should be done via Firebase for future use cases rather than through this API surface.
"""
type ALaCarteRedirect {
  """Body of the redirect dialog message."""
  copy: String!

  """Subtitle of the redirect message."""
  subtitle: String!

  """Title of the redirect message."""
  title: String!

  """URL to redirect the user to."""
  url: Url!
}

input AddVariantsToCartInput {
  cartId: ID!
  variants: [VariantQuantityInput!]!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of AddVariantsToCart."""
type AddVariantsToCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Representation of an address. For now, we assume US addresses only."""
type Address {
  """City to use for this address."""
  city: String!

  """
  Whether or not this address is considered the user's default for the particular context it appears in. Note that a user can have more than one default address. For example, food and wine subscriptions can have different addresses associated with them.
  """
  default: Boolean!

  """Any special delivery instructions requested."""
  deliveryInstructions: String

  """Name of the person this order is going to."""
  deliveryName: PersonName!

  """The unique ID of this address."""
  id: ID!

  """First line of the address. Must be present."""
  line1: String!

  """Second line of address. Optional."""
  line2: String

  """
  Phone number for this address. This is required for many of our carriers.
  """
  phoneNumber: String!

  """State for the address. Always a 2-letter USPS abbreviation."""
  state: String!

  """Zip code to use for this address."""
  zip: String!
}

"""Input information to update an address."""
input AddressInput {
  """The name of the person to use for delivery."""
  deliveryName: String!

  """The first line of the address information."""
  line1: String!

  """The second line of the address information, if any."""
  line2: String

  """Any special delivery instructions requested."""
  deliveryInstructions: String

  """The city to use for this address."""
  city: String!

  """The abbreviation for the state to use for this address."""
  stateCode: String!

  """The zip code to use for this address."""
  zipCode: String!

  """
  The phone number to use for an address. This is required because many of our carriers require it.
  """
  phoneNumber: String!
}

"""Input object for advancing the checkout flow."""
input AdvanceCheckoutForCartInput {
  """The ID of the cart to advance."""
  cartId: ID!

  """
  Optional identifier of the logical owner of the cart. This MUST be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of AdvanceCheckoutForCart."""
type AdvanceCheckoutForCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Type of application supported by Blue Apron APIs"""
enum AppType {
  """Web site, either desktop or mobile"""
  WEB

  """Native iOS application"""
  IOS

  """Native Android application"""
  ANDROID
}

type AppliedPromotion {
  """
  The amount of money this promotion reduced the cost of the order by. Note that this is represented as a positive value.
  """
  amount: Money!

  """The user-visible name of this promotion."""
  displayName: String!
}

input ApplyCouponToCartInput {
  cartId: ID!
  couponCode: String!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of ApplyCouponToCart."""
type ApplyCouponToCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""
Input for attaching a payment method to a user's account. This will become their new default method of payment.
"""
input AttachPaymentMethodInput {
  """
  Whether this action represents an update of the user's payment method. This should be set to true in cases other than new user account signup. If omitted, the default value is false.
  """
  isUpdate: Boolean = false

  """
  Verification token from Recaptcha check. This is required in certain environments.
  """
  recaptchaToken: String

  """
  The ID of the new payment method from Stripe. This should be obtained from the Stripe SDKs.
  """
  stripePaymentMethodId: ID!
}

"""Autogenerated return type of AttachPaymentMethod."""
type AttachPaymentMethodPayload {
  clientErrors: [ClientError!]

  """The newly attached payment method, if any."""
  paymentMethod: PaymentMethod

  """
  The client secret of the Stripe payment method, if any. This is used to complete callbacks from Stripe client widgets.
  """
  stripeClientSecret: String
}

"""
The level of availability for an object in Blue Apron's systems. Used to express more granular concepts than simple boolean available/unavailable.
"""
enum AvailabilityLevel {
  """
  The product is available for sale to the requesting user at the time of the request. This does not guarantee that the product will remain available by the time the user acts, however.
  """
  AVAILABLE

  """
  The product isn't in stock at this moment, but it can be backordered. This will be fulfilled as soon as we have additional inventory of the item.
  """
  BACKORDERABLE

  """
  The product has been explicitly discontinued. In this case, the product is not available for sale to anyone. Clients may handle this case as they see fit - but generally will choose to hide variants which have been discontinued.
  """
  DISCONTINUED

  """
  The product is not available to the requesting user.This may be because the product is sold out, or it may represent a different condition.
  """
  UNAVAILABLE

  """
  The availability of the product cannot be correctly determined. This happens when we don't have the correct information as part of the request to safely figure out the availability.
  """
  UNKNOWN
}

"""
Badges represent visual decorations on Variants. These are used to convey information and merchandise certain properties of the variant. Note that badges are a property of a Variant and *not of a Product - badges may change between the different variants of a single product. Additionally, note that badges should be treated purely as display information. Clients should not condition any behavior other than display decisions on the presence or absence of a badge.
"""
type Badge {
  """
  The user-visible description of this badge, if any. Not all badges have descriptions, so this may return null.
  """
  description: String

  """
  The name to render to users. This name should not be used for any decision making on the client - use the name field instead.
  """
  displayName: String!

  """
  The priority with which to display this badge. Badges should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """The primary identifier of this badge."""
  id: ID!

  """The image to use for this badge, if any."""
  image: Image

  """
  The internal name of the badge. This can be used to make decisions client-side. For example, clients might want to style different badges differently.
  """
  name: String!

  """The type of the given badge."""
  type: BadgeType!
}

"""
Filter to apply when querying for badges. Filters are ANDed together to product the final query.
"""
input BadgeFilterInput {
  """
  The type of badges to include. If not provided or empty, all badges will be included.
  """
  types: [BadgeType!]
}

"""Possible types of badges in the Blue Apron ecosystem."""
enum BadgeType {
  """
  A badge used to display marketing campaign properties of the variant (e.g., Wellness)
  """
  CAMPAIGN

  """A badge used to display culinary properties of the variant."""
  CULINARY

  """
  A badge intended to display prominently in the variant description, used for partnerships and other endorsements.
  """
  ENDORSEMENT

  """
  A badge used to prominently feature information about a variant. No variant is allowed to have more than one of these at a time.
  """
  FEATURE

  """A badge used specifically to display SmartPoints information."""
  SMART_POINTS

  """A badge that should be displayed as a small sticker on the hero view."""
  STICKER

  """A badge used to indicate the flavor profile of a wine."""
  TASTE_CATEGORY
}

"""
Carts represent orders that are in progress. While the user is able to choose new items, the cart is mutable. Once a cart is finalized, an Order is generated from it.
"""
type Cart {
  """
  The address to use for billing purposes for this cart. May not be populated until during checkout.
  """
  billingAddress: Address

  """The cart context of this cart."""
  cartContext: CartContext!

  """
  The deadline in UTC for a user to modify this cart, if any. If there is no relevant deadline, this field will be null.
  """
  changeDeadline: DateTime

  """
  Where this cart currently is in the checkout flow. Note that it is possible to have loops within this state machine as it does not strictly advance linearly - a customer can go back and make changes to their cart, for example.
  """
  checkoutState: CheckoutState!

  """
  Display information for the credit card associated with this cart, if any. This is the card that is currently associated with the cart, which may change in the future.
  """
  creditCard: CreditCard @deprecated(reason: "This field is not expressive enough to capture payments with other mechanisms. This field has been deprecated in favor of paymentMethod, which is more generic.")

  """
  The guest token of this cart. Used to identify the owner for carts which are not associated with an authenticated user.
  """
  guestToken: ID

  """The identifier of the cart."""
  id: ID!

  """
  The line items contained in this cart. May be empty if no line items are currently associated with this cart. This is intended for cases where shipments do not yet exist, or where clients wish to present a view that does not care about shipment details.
  """
  lineItems: [LineItem!]!

  """
  Supported options for the cart object. May be empty if no options are supported.
  """
  options: [CartOption!]!

  """
  Display information for the payment method associated with this cart, if any. This information may change in the future.
  """
  paymentMethod: PaymentMethod

  """
  Pricing information for this cart. Prices for carts generally represent estimated prices that may change when the cart is finalized.
  """
  price: OrderPrice!

  """
  The full Products associated with the line items of this cart. This can be used by clients to render out full product details (including other possible variants, etc) when rendering the cart details.
  """
  products: [Product!]!

  """
  The promotions which have been applied to this cart, if any. May be empty if no promotions have been applied. Note that this should be considered display-only information - all computation of discounts should be handled through the OrderPrice model instead.
  """
  promotions: [AppliedPromotion!]!

  """
  The status of this cart if it's a scheduled cart eg. a cart that is scheduled each cycle. These statuses can and will be different compared to marketplace/checkout carts.
  """
  scheduleState: ScheduleState

  """
  Information about the scheduled arrival of this cart. Note that the date is a rough approximation, since carts may contain shipments from multiple sources which may not arrive on the same day.
  """
  scheduledArrival: ScheduledArrival

  """
  The date this cart is scheduled to arrive. Note that this is a rough approximation, since carts may contain shipments from multiple sources which may not arrive on the same day.
  """
  scheduledArrivalDate: Date

  """
  Shipments for this cart, if any. Carts should always have at least one shipment if there are any variants in the cart. Note that shipments are not stable, and may change as the cart contents change, or as the user updates cart information.
  """
  shipments: [Shipment!]!

  """
  The address these items will ship to. May not be populated until the user is ready to check out. In the case of subscriptions, this will usually be populated earlier.
  """
  shippingAddress: Address

  """The current state of the cart."""
  state: CartState!

  """The supported mutations that are allowed on this cart"""
  supportedMutations: [CartMutation!]!

  """
  Variants that are contained in this cart. This is a simplification of line items - and should no longer be used.
  """
  variants: [ProductVariant!] @deprecated(reason: "This notion is not expressive enough to capture items with multiple quantities. This requires us to use line items instead.")
}

"""Input object for providing compliance information."""
input CartComplianceInput {
  """
  The date of birth for the user, specified as YYYY-MM-DD. Required if the cart contains age restricted products. For now, this is the only type of compliance we care about - if we add others, we may relax the required status of this field.
  """
  dateOfBirth: Date!
}

"""The context in which a cart was created."""
enum CartContext {
  """Cart used for gift cards only."""
  GIFT_CARD

  """Cart used for marketplace orders."""
  MARKET

  """Cart belonging to a food subscription."""
  SUBSCRIPTION_FOOD

  """Cart belonging to a wine subscription."""
  SUBSCRIPTION_WINE
}

"""The possible mutations that can be applied to a scheduled cart."""
enum CartMutation {
  """Allow clients to update the address of this cart."""
  ADDRESS

  """Allow clients to fork this cart."""
  FORK

  """Allow clients to make content changes to this cart."""
  CONTENT

  """Allow clients to reschedule this cart."""
  RESCHEDULE

  """Allow clients to suspend this cart."""
  SUSPEND

  """Allow clients to unsuspend this cart."""
  UNSUSPEND
}

"""Optional flags for carts."""
enum CartOption {
  """
  If set, this cart supports setting a gift message for the recipient. Not all partners we work with support this.
  """
  GIFT_MESSAGE_ALLOWED

  """
  If set, this cart contains items which are age restricted, and requires validation of the user's date of birth.
  """
  REQUIRES_DATE_OF_BIRTH

  """
  If set, this cart requires that a valid shipping address be provided during checkout. Digital-only carts do not require this information.
  """
  REQUIRES_SHIPPING_ADDRESS

  """
  If set, this cart should only render placeholders for products. This is generally used by subscription carts when the cycle is not yet ready for customer visibility.
  """
  SHOW_PLACEHOLDER_PRODUCTS
}

"""
Input to identify the owner of the cart. This is generally used when the context of the request itself is insufficient to identify the owner accurately - e.g., in an unauthenticated request for guest checkout. If this object is used, at least one field must be provided.
"""
input CartOwnerIdInput {
  """Guest token associated with the cart."""
  guestToken: ID!
}

"""The possible states for a cart."""
enum CartState {
  """
  A cart in this state has been finalized and can no longer be modified by the user.
  """
  FINALIZED

  """A cart in this state can still be changed by the user."""
  MODIFIABLE
}

"""Input object for checking the price of a cart."""
input CheckCartPriceInput {
  """The ID of the cart to use to check the price."""
  cartId: ID!

  """
  The variants and quantities to use to estimate a new price for the cart. Only the prices of the provided variants will be considered, so the client must include every item they wish to evaluate for the new pricing. If no variants are provided, the current contents of the cart will be used.
  """
  variants: [VariantQuantityInput!]
}

"""Autogenerated return type of CheckCartPrice."""
type CheckCartPricePayload {
  clientErrors: [ClientError!]

  """
  Whether or not the user has credit available that may apply to this price but not be included in the result.
  """
  creditAvailable: Boolean
  price: OrderPrice

  """
  Whether or not the client should confirm this price with the user before proceeding. Usually, this would reflect a change in the total price that we want the user to be aware of before proceeding.
  """
  shouldConfirm: Boolean
}

"""State within the checkout state machine."""
enum CheckoutState {
  """
  Shipping address information is required. Once provided, contents may be broken out into additional shipments.
  """
  ADDRESS

  """Checkout is complete. The cart has now been finalized into an order."""
  COMPLETE

  """The cart is ready to be charged and finalized once the user confirms."""
  CONFIRM

  """
  Cart is not currently in the checkout flow. Note that a cart can enter this state multiple times.
  """
  NONE

  """Payment information is required."""
  PAYMENT

  """Shipping information is required for one or more shipments."""
  SHIPPING
}

"""Input object for claiming a cart."""
input ClaimCartInput {
  """The ID of the cart to claim."""
  cartId: ID!

  """
  The current owner ID of the cart to be claimed. This is required in order to verify that the user has access to claim the cart.
  """
  currentOwner: CartOwnerIdInput!

  """
  Optional email to associate with this cart. This may ONLY be provided if the request is otherwise unauthenticated.
  """
  email: String
}

"""Autogenerated return type of ClaimCart."""
type ClaimCartPayload {
  """The cart the user has claimed, if any."""
  cart: Cart
  clientErrors: [ClientError!]
}

"""
A representation of a client-facing error. This object contains additional information that clients can use to handle logic errors from GraphQL operations.
"""
type ClientError {
  """Client-facing message for this error."""
  message: String!
}

"""
A hex representation of a color, transported as a String. The color is formatted as `#` followed by the hex values for red, green, and blue (#RRGGBB).
"""
scalar ColorHex

"""Collection of various URLs used by clients."""
type ConfigUrls {
  """URL for the Account Settings page."""
  accountSettings: Url!

  """URL for the main Blue Apron blog."""
  blog: Url!

  """URL for dietary preference management."""
  dietaryPreferences: Url!

  """URL for the Freshness Guarantee page."""
  freshness: Url!

  """URL for the Gifts page."""
  gifts: Url!

  """URL for the Marketplace page."""
  marketplace: Url!

  """URL for the Privacy Policy page."""
  privacy: Url!

  """URL for the Reactivation page."""
  reactivation: Url!

  """URL template for the recipe comments page for a specific recipe."""
  recipeComments: Url!

  """URL for the How To Recycle page."""
  recycling: Url!

  """URL for the Sign Up page."""
  signup: Url!

  """URL for the Help and Support page."""
  support: Url!

  """URL for the Terms and Conditions page."""
  terms: Url!

  """
  URL for the admin page for this user. Used to assist CX agents with chat and other types of user communication. Will be null if the user is not authenticated.
  """
  userAdmin: Url

  """URL for the landing page for wine ala carte ordering."""
  wineALaCarte: Url!
}

"""
Dynamic configuration data for clients. Allows the server to control behaviors for different users on different clients as needed.
"""
type Configuration {
  """Configuration for A La Carte subscriptions"""
  aLaCarteConfig: ALaCarteConfig!

  """
  Flags enabled for the calling client. Note that these values are user specific, and so must be cleared after signing out.
  """
  features: [String!]!

  """
  Holdback groups for the user. Will be empty as holdbacks are a deprecated feature.
  """
  holdbackGroups: [HoldbackGroup!]!

  """
  HTTP headers for this configuration. These are expected to be appended to all GraphQL requests the client makes after fetching this data. Note that these values are user specific, and so must be cleared after signing out.
  """
  httpHeaders: [HttpHeader!]!

  """
  The minimum acceptable version for this client. Web has no notion of versions, so the minimum is not returned.
  """
  minimumAppVersion: String

  """
  The minimum OS version required to use the application. This represents the API Level on Android and the DeploymentTarget on iOS. Web does not have a similar notion today, so the field is always omitted for web.
  """
  minimumOsVersion: String

  """
  The minimum acceptable version for this client. Web has no notion of versions, so the minimum is not returned.
  """
  minimumVersion: Int @deprecated(reason: "This field only works for Android versions which can be represented as an integer. Use `minimum_app_version` instead to get a String.")

  """Configuration for referral incentive program."""
  referralConfig: ReferralConfig!

  """Configuration information for Stripe integration."""
  stripeConfig: StripeConfig!

  """
  Configurable URLs for the client. Used to dynamically drive destinations for web views for mobile clients.
  """
  urls: ConfigUrls!
}

"""The most basic card entry for a ContentStream."""
type ContentCard implements ContentStreamCard {
  """
  The analytics event to fire when a user taps on this card, if any is defined.
  """
  analyticsEvent: String

  """The body content of this card, if any."""
  body: String

  """
  The priority with which to display this card within the parent container. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """
  The ID of this card. Note that clients should treat this as an opaque string.
  """
  id: ID!

  """The image to render for this card, if any."""
  image: Image

  """The style to use when displaying this content card."""
  style: ContentStreamCardStyle!

  """
  The URL that this card should link to, if any. May be any supported URL - either a web URL or a deep link cannonical URL for deeplinking within the applications.
  """
  targetUrl: Url

  """The title of this card, if any."""
  title: String
}

"""
A ContentStream represents a stream of content. This is used for places where clients need to know some amount of thin content to display without having to necessarily know deep semantic meaning around the objects. This pattern is most often used for things like home screens, etc.
"""
type ContentStream {
  """An analytics event to fire when this stream is rendered, if any."""
  analyticsEvent: String

  """
  The containers that comprise this content stream. These should be displayed in order based on the container's displayPriority attribute. Note that this may be an empty list if the stream has no containers, but will never be null.
  """
  containers: [ContentStreamContainer!]!

  """The header of this content stream, if any."""
  header: ContentStreamHeader

  """
  The identifier of the stream. Should be treated as opaque by clients. This can be relied on as a primary key.
  """
  id: ID!
}

"""
A card within a content stream. Cards represent items that are displayed to users. Different types of cards may have different display properties as needed.
"""
interface ContentStreamCard {
  """
  The analytics event to fire when a user taps on this card, if any is defined.
  """
  analyticsEvent: String

  """
  The priority with which to display this card within the parent container. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """
  The ID of this card. Note that clients should treat this as an opaque string.
  """
  id: ID!

  """The style to use when displaying this content card."""
  style: ContentStreamCardStyle!

  """The title of this card, if any."""
  title: String
}

"""Possible styles to use when rendering ContentStreamCard objects."""
enum ContentStreamCardStyle {
  """Default content card styling."""
  DEFAULT

  """A featured content card, e.g. a more prominent story."""
  FEATURED

  """A promotional content card, e.g. a marketing card."""
  PROMOTION
}

"""
A container within a ContentStream. Containers are the root of all ContentStreams, and hold Card entries within them. Different types of containers have different visual layout behaviors as needed on clients.
"""
interface ContentStreamContainer {
  """
  The entries within this container. May be empty if the container has no children, but will never be null.
  """
  children: [ContentStreamCard!]!

  """
  The priority with which to display this container within the content stream. Note that the children have their own priority to order their display within this container. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """
  The ID of this containter. Clients should always treat this as an opaque identifier and never make assumptions about the structure of the ID.
  """
  id: ID!

  """The subtitle for this container, if any."""
  subtitle: String

  """The title of this container, if any."""
  title: String
}

"""Supported contexts for content streams."""
enum ContentStreamContext {
  """Stream for current food orders."""
  CURRENT_FOOD

  """Stream for skipped orders."""
  CURRENT_SKIPPED

  """Stream for current wine orders."""
  CURRENT_WINE

  """Stream for site footer."""
  FOOTER
}

"""
Header information for a ContentStream. Clients often need to display information at the top of a stream in special formats. This data indicates to the client that there is header content to render.
"""
type ContentStreamHeader {
  """The subtitle to render in the header, if any."""
  subtitle: String

  """The title to render as a header, if any."""
  title: String
}

"""
The most basic form of container. This represents a logical section within a content stream.
"""
type ContentStreamSection implements ContentStreamContainer {
  """
  The entries within this container. May be empty if the container has no children, but will never be null.
  """
  children: [ContentStreamCard!]!

  """
  The priority with which to display this container within the content stream. Note that the children have their own priority to order their display within this container. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """
  The ID of this containter. Clients should always treat this as an opaque identifier and never make assumptions about the structure of the ID.
  """
  id: ID!

  """The subtitle for this container, if any."""
  subtitle: String

  """The title of this container, if any."""
  title: String
}

"""Autogenerated return type of CreateAccountDeletionRequest."""
type CreateAccountDeletionRequestPayload {
  clientErrors: [ClientError!]
}

"""Input object for creating a cart."""
input CreateCartInput {
  """The context of cart to create."""
  cartContext: CartContext!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput

  """
  Optional information about the line items to populate the cart with initially. If not provided, the cart will initially be empty. Note that the previous quantity of all SKUs here should be set to 0.
  """
  variants: [VariantQuantityInput!]

  """
  Token to allow for idempotent creation requests. This should be a UUID. Clients are expected to generate this value locally.
  """
  idempotencyToken: String!
}

"""Autogenerated return type of CreateCart."""
type CreateCartPayload {
  """The resulting cart after creation."""
  cart: Cart
  clientErrors: [ClientError!]
}

"""Autogenerated return type of CreateSousChefMenu."""
type CreateSousChefMenuPayload {
  clientErrors: [ClientError!]
  menu: SousChefMenu!
}

"""Input to create a user invite."""
input CreateUserInviteInput {
  """
  User's name. The user's full name (name.full) is a mandatory input field.
  """
  name: PersonNameInput!
}

"""Autogenerated return type of CreateUserInvite."""
type CreateUserInvitePayload {
  clientErrors: [ClientError!]

  """The resulting user invite after creation."""
  userInvite: UserInvite
}

"""
Representation of a user's available credit. Contains information about the various details of the user's balance.
"""
type CreditBalance {
  """
  The total amount of rewards that the user has earned. These credits may have already been redeemed.
  """
  earnedRewards: RewardEarnings!

  """
  The amount of the user's balance that is restricted. Restricted credit can not be used for orders containing alcohol.
  """
  restricted: Money!

  """
  The total amount of credit the user has available. This is the sum of their restricted and unrestricted credits.
  """
  total: Money!

  """
  The amount of the user's balance that is unrestricted. These credits may be used for any purchase.
  """
  unrestricted: Money!
}

"""
Representation of a credit card. Used to display payment information to clients.
"""
type CreditCard {
  """
  The type of the credit card, formatted for client display. For example, "American Express" or "Visa".
  """
  displayType: String!

  """
  The month that the credit card expires, rendered as a string for display purposes. Formatted as a two-digit string - ie, "07".
  """
  expirationMonth: String!

  """
  The year that the credit card expires, rendered as a string for display purposes. Formatted as a four-digit string - ie, "2022".
  """
  expirationYear: String!

  """
  The last digits of the credit card, used to help users recognize the card without revealing sensitive information.
  """
  lastDigits: String!

  """The name associated with this credit card, if any."""
  name: String
}

"""Options for damaged delivery in order issue reporting."""
enum DamagedDeliveryOption {
  BOX
  ICE_PACKS
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

"""
A DeliveryDate represents the particular date for a delivery. For example, 2023-02-10 could be a DeliveryDate, which would have a DeliveryDay indicating that it is a Friday.
"""
type DeliveryDate {
  """The date for this delivery."""
  date: Date!

  """The actual day information for this delivery date."""
  deliveryDay: DeliveryDay!

  """Client display name for this delivery date. E.g., "Friday 2/10/2023"."""
  displayName: String!
}

"""
A DeliveryDay is an abstraction allowing us to represent a logical day of a period. If the relevant period is weekly, a DeliveryDay represents a day-of-week; if the period is monthly, the DeliveryDay represents a day-of-month.
"""
type DeliveryDay {
  """The display name for this delivery day. E.g., "Tuesday"."""
  displayName: String!

  """
  The priority with which to display the delivery day. Delivery day should be displayed in ascending order.
  """
  displayPriority: Int!

  """An ID for this delivery day."""
  id: ID!
}

"""
Display price type provides a styling hint for clients since the formatted price is supposed to be treated as an opaque string.
"""
enum DisplayPriceType {
  """A display price type that corresponds with a negative delta price."""
  NEGATIVE

  """A display price type that corresponds with an abosolute price."""
  NEUTRAL

  """A display price type that corresponds with a positive delta price."""
  POSITIVE
}

"""
Representation of an entitlement. Used to display the user's entitlements.
"""
type Entitlement {
  """Whether or not this entitlement is active."""
  active: Boolean!

  """The copy to display for this entitlement, if any."""
  displayCopy: String

  """The client-facing name of this entitlement."""
  displayName: String!

  """The unique ID of this entitlement."""
  id: ID!

  """The third party management url for this entitlement, if any."""
  managementUrl: Url

  """The partner for this entitlement."""
  partner: EntitlementPartner!

  """The date and time for which this entitlement terminates, if any."""
  terminatesAt: DateTime
}

"""The third-party partner associated with an entitlement."""
enum EntitlementPartner {
  """The entitlement partner is Verizon."""
  VERIZON
}

"""Input object for finalizing a cart into an order."""
input FinalizeCartInput {
  """The ID of the cart to finalize."""
  cartId: ID!

  """
  Additional compliance information for the cart. Required for carts which contain restricted products.
  """
  complianceInfo: CartComplianceInput

  """
  Optional identifier of the logical owner of the cart. This MUST be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of FinalizeCart."""
type FinalizeCartPayload {
  """
  The latest version of the cart from the server. Note that this will only be returned if there was an error during finalization. Clients should request this field if they need to re-render cart information in the case of an error.
  """
  cart: Cart
  clientErrors: [ClientError!]

  """
  The order resulting from finalizing the input cart. This will only be returned if the finalization succeeds.
  """
  order: Order
}

"""Input to apply when forking a new cart."""
input ForkCartInput {
  """The original cart to use as a starting point."""
  cartId: ID!

  """
  The desired variants to add to the cart, if any. If not provided, the cart will have the default contents. Note that the "previous_quantity" field of the input objects here should always be set to 0, since the forked order has no contents initially.
  """
  variants: [VariantQuantityInput!]
}

"""Autogenerated return type of ForkCart."""
type ForkCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""
Input with gift-related information. Used to manipulate the contents of carts.
"""
input GiftInfoForCartInput {
  """The name of the person sending the gift."""
  senderName: String!

  """The name of the person receiving the gift."""
  recipientName: String

  """
  Optional email address of the person receiving the gift. Used, for example, when fulfilling a digital gift card.
  """
  recipientEmail: String

  """Optional text for the recipient to read."""
  message: String
}

"""Group representing a holdback for a particular user."""
type HoldbackGroup {
  """
  The audience attribute used to identify this particular holdback. This tells us why the user was included in this group.
  """
  audienceAttribute: String! @deprecated(reason: "Functionality removed")

  """Whether this holdback is active or not."""
  enabled: Boolean! @deprecated(reason: "Functionality removed")
}

"""
A header to be added to client HTTP GraphQL requests. This allows the server to handle requests appropriately, such as by caching certain data at the edge.
"""
type HttpHeader {
  """The name of the header."""
  name: String!

  """The value to put in the header."""
  value: String!
}

"""
Representation of an image. Includes the base URL to fetch the image from, as well as any additional metadata about this image.
"""
type Image {
  """Alt text to use as a content description for this image, if any."""
  altText: String

  """The URL to use to retrieve the image."""
  url: Url!
}

"""Input object for initiating the checkout flow."""
input InitiateCheckoutForCartInput {
  """The ID of the cart to begin checking out."""
  cartId: ID!

  """
  Optional identifier of the logical owner of the cart. This MUST be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput

  """
  Whether or not to set the payment information for the cart from the user's subscription payment information. This only works for authenticated users. If omitted, the default value is false.
  """
  setPaymentInfo: Boolean = false

  """
  Whether or not to set the shipping information for the cart from the user's subscription, if any. This only works for authenticated users. If omitted, the default value is false.
  """
  setShippingInfo: Boolean = false
}

"""Autogenerated return type of InitiateCheckoutForCart."""
type InitiateCheckoutForCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""
A LineItem represents an entry in a cart or order. It pairs a Variant with the desired quantity.
"""
type LineItem {
  """
  The priority with which to display this line item. This allows clients to stably sort items within a Cart, Order, Package, etc. This is in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """
  The price of the variant in this line item. This represents the price that was (or will be) paid for the variant in the context of this cart or order. This is distinct from the price embedded in the variant itself, since the price may change over time.
  """
  price: Money!

  """The desired quantity of the item."""
  quantity: Int!

  """The desired Variant for this line item."""
  variant: ProductVariant!
}

"""Representation of a marketplace item in Blue Apron's system."""
type MarketItem implements ProductVariant {
  """Availability information for this variant."""
  availability: ProductAvailability!

  """
  Badges attached to this variant. May be null if there are no relevant badges.
  """
  badges: [Badge!]

  """
  Whether or not this variant is considered core for this product. Products always have at least one core variant, but may have multiple. For example, a recipe may have a core variant for each serving size supported.
  """
  core: Boolean!

  """Description of the variant."""
  description: String!

  """
  Human-readable pricing info for this variant. Includes metadata for conditional styling.
  """
  displayPrice: VariantDisplayPrice

  """
  The priority with which to display this variant within the context of the parent product. Note that this should not be confused with the display priority of the product itself, which controls ordering of the product in lists. This is in ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """An array of features enabled for the product variant."""
  features: [ProductVariantFeature!]!

  """
  Collection of images for this variant. May not be present if the variant hasn't been assigned any images yet.
  """
  images: ProductImages

  """Naming information for this variant."""
  name: ProductName!

  """
  Pricing information for this variant. Note that this may not be the price a user will actually pay for the variant. In the context of a Cart or an Order, clients should refer to LineItem.price instead.
  """
  price: VariantPrice

  """
  The globally unique SKU of the variant. The exact format here should never be relied on, and the value should be treated as opaque to clients.
  """
  sku: ID!

  """
  Tags applied to this variant. Tags are intended for logical operations on the client, such as filtering or grouping. These should never be displayed to users. The set of possible tags in non-deterministic, so specific tag values may appear and disappear over time.
  """
  tags: [String!]!

  """
  This represents the logical number of units in the variant, which is often used for pricing or other concerns. For example, a recipe might have a unit count of 2 to indicate that there are two portions, which is distinct from the number of nutritional servings.
  """
  unitCount: Int

  """The URL for the details page of this variant."""
  url: Url!

  """
  User-specific information associated with this variant if present. These fields tend to be expensive, so clients should query with care.
  """
  userInfo: VariantUserInfo

  """
  The values of the product variables for this particular variant. These logically define the variant's position in the coordinate system defined by the parent product. These values are what differentiate one variant from another, and can be used to drive displays in the UI.
  """
  variableValues: [ProductVariableValue!]!
}

"""A representation of a user's meal preferences."""
type MealPreference {
  """The client-facing name of the preference."""
  displayName: String
  enabled: Boolean!

  """The type and name of the preference."""
  type: MealPreferenceType!
}

"""Possible types of meal preferences in the Blue Apron ecosystem."""
enum MealPreferenceType {
  """
  A preference indicating the given user is interested in Carb Conscious offerings.
  """
  CARB_CONSCIOUS

  """
  A preference indicating the given user is interested in Easy Prep & Cleanup offerings.
  """
  EASY

  """
  A preference indicating the given user is interested in Family Friendly offerings.
  """
  FAMILY_FRIENDLY

  """
  A preference indicating the given user is interested in Chef Favorites offerings.
  """
  FAVORITES

  """
  A preference indicating the given user is interested in High Protein offerings.
  """
  HIGH_PROTEIN

  """
  A preference indicating the given user is interested in Keto Friendly offerings.
  """
  KETO_FRIENDLY

  """
  A preference indicating the given user is interested in 600 Calories or Less offerings.
  """
  LESS_THAN_600_CALORIES

  """
  A preference indicating the given user is interested in Seafood offerings.
  """
  SEAFOOD

  """
  A preference indicating the given user is interested in Special Menu offerings.
  """
  SPECIAL_MENUS

  """
  A preference indicating the given user is interested in Try It All offerings.
  """
  TRY_IT_ALL

  """
  A preference indicating the given user is interested in Vegetarian offerings.
  """
  VEGGIES

  """
  A preference indicating the given user is interested in Wellness offerings.
  """
  WELLNESS
}

"""
A representation of a particular menu. Menus indicate what products are purchasable in a specific grouping.
"""
type Menu {
  """Client-facing copy strings for this menu."""
  copy: MenuCopy!

  """The date of this particular menu. Specified as YYYY-MM-DD."""
  date: Date!

  """Extra copy for this menu. Used to give additional context to users."""
  displayCopy: String @deprecated(reason: "Deprecated in favor of using the MenuCopy object. Use the `description` field of the MenuCopy object instead.")

  """An optional icon to display for this menu."""
  displayIcon: Image

  """The client-facing name of the menu."""
  displayName: String!

  """
  The priority with which to display this menu. Menus should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """
  All available filters for this menu. For now, this will return dummy data.
  """
  filters: [MenuFilter!]!

  """Any optional flags related to this menu."""
  flags: [MenuFlag!]!

  """
  How many products the user must order to qualify for free shipping. If the user cannot receive free shipping on this order, this will be null. This value can be used to message the user when they are below the desired count, etc. This will be deprecated as soon as all clients stop requesting it.
  """
  freeShippingProductThreshold: Int @deprecated(reason: "This field is only returning null data and should be removed once clients stop requesting.")

  """
  The unique identifier of this menu. Should always be treated as opaque by clients.
  """
  id: ID!

  """Any applicable restrictions for this menu."""
  restrictions: MenuRestrictions!

  """
  All visible sections for this menu. All menus must have at least one section, but may have more.
  """
  sections: [MenuSection!]!

  """
  A logical identifier to use for this menu. In a given cycle, all menus will have unique slugs, which can be used by clients to distinguish them and make decisions.
  """
  slug: String!
}

"""
Additional client-facing strings for Menu objects. These are used to render additional information as necessary.
"""
type MenuCopy {
  """
  Copy to display when the user has not added enough items to their cart, if any. Not all menus require this.
  """
  belowMinimumSelections: String

  """Additional description of this menu, if any."""
  description: String
}

"""Representation of a filter for a menu."""
type MenuFilter {
  """The client-facing name of this menu filter."""
  displayName: String!

  """
  The priority with which to display this menu filter. Menu filters should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """The tag for the client to filter on."""
  tag: String!
}

"""
Input to apply filtering when querying for menus. A date must always be provided for a filter to be valid. If other filters are provided, they will be ANDed together to produce the final query.
"""
input MenuFilterInput {
  """Date to return the menus for. Specified as YYYY-MM-DD."""
  date: Date!

  """
  Which type of menu to request. If not provided, all menus will be included.
  """
  type: MenuType

  """
  An optional ID for a cart. This is used to provide context for product availability and address information.
  """
  cartId: ID
}

"""Optional flags for menu behavior."""
enum MenuFlag {
  """Indicates that the menu is considered part of an early access release."""
  EARLY_ACCESS
}

"""Representation of any restrictions for the given menu."""
type MenuRestrictions {
  """
  Valid delivery dates for this menu. If the menu is not restricted to particular dates, this field will be null.
  """
  availableDates: [Date!]

  """
  Maximum number of variants that may be selected from this menu in any given cart.
  """
  maximumSelections: Int!

  """
  Maximum number of units that may be selected from this menu for any given cart. Will be null if there is no maximum selectable value for this menu.
  """
  maximumUnitCountSelections: Int

  """
  Minimum number of variants that may be selected from this menu in any given cart.
  """
  minimumSelections: Int!

  """
  Minimum number of units that may be selected from this menu for any given cart.
  """
  minimumUnitCountSelections: Int!
}

"""The sections that are available as part of the menu."""
type MenuSection {
  """
  Extra copy for this menu section. Used to give additional context to users.
  """
  displayCopy: String

  """
  The client-facing name of the menu section. This can be null if there is no client-visible name.
  """
  displayName: String

  """
  The priority with which to display the menu section. Menu subsections should be displayed in ascending order.
  """
  displayPriority: Int!

  """
  The ID of the menu section. Clients should always treat this as an opaque identifier and never make assumptions about the structure of the ID.
  """
  id: ID!

  """The products that are available as part of the menu section."""
  products: [Product!]!
}

"""
A representation of a particular menu set. Menu sets are aggregations of menus.
"""
type MenuSet {
  """The date of this particular menu set. Specified as YYYY-MM-DD."""
  date: Date!

  """The client-facing name of the menu set."""
  displayName: String!

  """
  The priority with which to display this menu set. Menu sets should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """
  The ID of this menu set. Clients should always treat this as an opaque identifier and never make assumptions about the structure of the ID.
  """
  id: ID!

  """A logical grouping of menus that belong to a particular cycle."""
  menus: [Menu!]!

  """
  A logical identifier to use for this menu set. In a given cycle, all menu sets will have unique slugs, which can be used by clients to distinguish them and make decisions.
  """
  slug: String!
}

"""
Input to apply filtering when querying for menu sets. A date must always be provided for a filter to be valid. If other filters are provided, they will be ANDed together to produce the final query.
"""
input MenuSetFilterInput {
  """Date to return the menu sets for. Specified as YYYY-MM-DD."""
  date: Date!

  """
  Which type of menu to request. If not provided, all menus will be included.
  """
  type: MenuType

  """
  An optional ID for a cart. This is used to provide context for product availability and address information.
  """
  cartId: ID
}

"""Possible types of menus in the Blue Apron ecosystem."""
enum MenuType {
  """A menu of recipes for people to cook."""
  FOOD

  """A menu of wines for people to drink."""
  WINE
}

"""
Representation of an amount of money. This allows clients to represent prices in multiple formats as needed.
"""
type Money {
  """
  Display-formatted value of the price. Note that this does not include any currency symbols today. Clients should never make any other assumptions about this string, however.
  """
  displayValue: String!

  """
  Integer representation of the price in hundredths. Allows for accurate computations on the client where needed.
  """
  hundredths: Int!
}

type MutationRoot {
  """
  Add the specified variants to an existing cart. This will fail if the variants do not meet the business rules for the cart (ie, adding too many products, the wrong kind of products, etc). Note that this currently only works for Agora-backed carts, and that Agora only supports a single item for now.
  """
  addVariantsToCart(input: AddVariantsToCartInput!): AddVariantsToCartPayload

  """
  Advance the checkout flow for a given cart as much as possible. This will attempt to move the cart through the checkout state machine, updating the checkout state as needed. Note that it is possible that the state will not change after this call. Clients should read the checkout state of the returned cart to determine how to proceed.
  """
  advanceCheckoutForCart(input: AdvanceCheckoutForCartInput!): AdvanceCheckoutForCartPayload

  """Apply the given coupon to a specified cart."""
  applyCouponToCart(input: ApplyCouponToCartInput!): ApplyCouponToCartPayload

  """
  Attach a payment method to a User. This will be used to pay for future subscription orders, and will become the user's default form of payment.
  """
  attachPaymentMethod(input: AttachPaymentMethodInput!): AttachPaymentMethodPayload

  """
  Allows clients to check the potential price implications of putting given items in the specified cart. This is used to avoid clients doing price computations locally. Before a user confirms their order selections, this mutation can be used to retrieve estimated price information for the provided configuration.
  """
  checkCartPrice(input: CheckCartPriceInput!): CheckCartPricePayload

  """
  Claim ownership of a cart for the user of this request. If the request is authenticated, the cart will be associated with the provided user. Otherwise, additional owner information can be provided as well.
  """
  claimCart(input: ClaimCartInput!): ClaimCartPayload

  """Create an account deletion request."""
  createAccountDeletionRequest: CreateAccountDeletionRequestPayload

  """
  Create a cart given the specified options. Note that for now, this only works for Agora-backed carts.
  """
  createCart(input: CreateCartInput!): CreateCartPayload

  """
  Mutation to create a sous chef menu for the currently logged in user.Will set the "state" to "initial" and provide a default name.
  """
  createSousChefMenu: CreateSousChefMenuPayload

  """Create an invite for a user given the specified options."""
  createUserInvite(input: CreateUserInviteInput!): CreateUserInvitePayload

  """
  Finalize a cart. This will process the user's payment and turn the cart into an order. After this call succeeds, the cart can no longer be updated.
  """
  finalizeCart(input: FinalizeCartInput!): FinalizeCartPayload

  """
  Create a new cart based on a previous one. The cart will behave like a newly scheduled cart in the same delivery window as the original cart. Note, however, that as currently implemented, we do NOT preserve the other properties of the cart - there is no guarantee the forked cart will share the same address, contents, or other properties.
  """
  forkCart(input: ForkCartInput!): ForkCartPayload

  """
  Begin the checkout flow for a given cart. This will begin moving the cart through the checkout state machine, updating the checkout state of the cart as needed.
  """
  initiateCheckoutForCart(input: InitiateCheckoutForCartInput!): InitiateCheckoutForCartPayload

  """Pauses a subscription for a certain amount of time."""
  pauseSubscription(input: PauseSubscriptionInput!): PauseSubscriptionPayload

  """
  Rate a variant with a rating, comment, or both. This will overwrite any existing rating values.
  """
  rateVariant(input: RateVariantInput!): RateVariantPayload

  """Reactivate a subscription for a user."""
  reactivateSubscription(input: ReactivateSubscriptionInput!): ReactivateSubscriptionPayload

  """
  Remove the specified variants from an existing cart. This will fail if the variants do not meet the business rules for the cart (ie, if the variants are not in the order, or so on). Note that this currently only works for Agora-backed carts, and that Agora only supports a single item for now.
  """
  removeVariantsFromCart(input: RemoveVariantsFromCartInput!): RemoveVariantsFromCartPayload

  """Mark a variant as saved for the current user."""
  saveVariant(input: SaveVariantInput!): SaveVariantPayload

  """
  Select shipping rates for shipments in a cart. This allows the cart to progress through the checkout state machine.
  """
  selectShippingRatesForCart(input: SelectShippingRatesForCartInput!): SelectShippingRatesForCartPayload

  """
  Set the cart to contain exactly the specified variants. This will remove any currently assigned variants and replace the existing contents with the requested ones. This will fail if the requested variants cannot be assigned to this cart for whatever reason.
  """
  setCartVariants(input: SetCartVariantsInput!): SetCartVariantsPayload

  """Sets a delivery day for a cart."""
  setDeliveryDayForCart(input: SetDeliveryDayForCartInput!): SetDeliveryDayForCartPayload

  """Sets a delivery day for subscription."""
  setDeliveryDayForSubscription(input: SetDeliveryDayForSubscriptionInput!): SetDeliveryDayForSubscriptionPayload

  """Populate the gift-specific attributes of a cart."""
  setGiftInfoForCart(input: SetGiftInfoForCartInput!): SetGiftInfoForCartPayload

  """
  Set the payment information for a cart. Required to move past the PAYMENT state of the cart checkout flow.
  """
  setPaymentInfoForCart(input: SetPaymentInfoForCartInput!): SetPaymentInfoForCartPayload

  """Set the shipping information for a specified cart."""
  setShippingInfoForCart(input: SetShippingInfoForCartInput!): SetShippingInfoForCartPayload

  """Sets shipping info for a subscription."""
  setShippingInfoForSubscription(input: SetShippingInfoForSubscriptionInput!): SetShippingInfoForSubscriptionPayload

  """Sets a shipping rate for subscription."""
  setShippingRateForSubscriptionMutator(
    """The input required to set the shipping rate."""
    input: SetShippingRateForSubscriptionInput!
  ): SetShippingRateForSubscriptionPayload

  """Submits an order issue through the Order Issue Reporting form."""
  submitOrderIssue(input: OrderIssueInput!): SubmitOrderIssuePayload

  """
  Submit detailed feedback for a variant. Feedback is provided in the form of an optional rating value, along with the detailed responses to a particular survey that was presented to the user. If you do not need to submit survey data, use the RateVariant mutation instead.
  """
  submitVariantFeedback(input: SubmitVariantFeedbackInput!): SubmitVariantFeedbackPayload

  """
  Set a cart to the suspended schedule state. This is only meaningful for scheduled cart contexts. This operation is idempotent - if the cart is already suspended, calling this mutation again will indicate success.
  """
  suspendCart(input: SuspendCartInput!): SuspendCartPayload

  """Unpauses a currently paused subscription."""
  unpauseSubscription(input: UnpauseSubscriptionInput!): UnpauseSubscriptionPayload

  """Mark a variant as unsaved for the current user."""
  unsaveVariant(input: UnsaveVariantInput!): UnsaveVariantPayload

  """
  Set a cart to the scheduled schedule state. This is only meaningful for scheduled cart contexts. This operation is idempotent - if the cart is already scheduled, calling this mutation again will indicate success.
  """
  unsuspendCart(input: UnsuspendCartInput!): UnsuspendCartPayload

  """
  Enable or disable meal preferences saved for a given user. Currently returns ONLY the preference passed, but in the future will return ALL user preferences.
  """
  updateMealPreferences(input: [UpdateMealPreferenceInput!]!): UpdateMealPreferencesPayload

  """Update Sous Chef Menu (TODO: Fill out more info)"""
  updateSousChefMenu(input: UpdateMenuInput!): UpdateSousChefMenuPayload

  """Update the properties of a subscription."""
  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload

  """Updates a user's account info."""
  updateUser(input: UserAccountInfoInput!): UpdateUserPayload

  """Opt in or out of tracking preferences for a user."""
  updateUserTrackingPreferences(input: UpdateUserTrackingPreferencesInput!): UpdateUserTrackingPreferencesPayload

  """Verify account deletion. This will cancel the user's subscriptions."""
  verifyAccountDeletion(input: VerifyAccountDeletionInput!): VerifyAccountDeletionPayload
}

"""Nutritional information for a product."""
type NutritionInfo {
  """
  Accurate per-facility calories per serving, if available. This value is not guaranteed to be available for all variants. This information is expensive to query, and should generally only be fetched for a small number of variants at a time. If the client has this value cached locally, it is generally preferred to display this instead of the estimated value.
  """
  accurateServingCalories: Int

  """
  The detailed nutrion label file for this variant, if available. This value is not guaranteed to be available for all variants. This information is expensive to query, and should generally only be fetched for a small number of variants at a time.
  """
  detailLabel: Image

  """
  The value to display for nutritional servings count. This represents the number of servings from a nutritional perspective. Note that this value may not be strictly numeric - there exist some recipes with fractional servings which are rendered as 2½, etc, so clients should not attempt to parse this value. The intention is for this value to logically represent a quantity. Clients may use this to construct strings as appropriate.
  """
  displayServingsCount: String

  """
  Estimated calories per serving, if available. This value is not guaranteed to be available for all variants. This information is cheap to query and can be fetched for large numbers of variants at once.
  """
  estimatedServingCalories: Int
}

"""
Orders are generated once a Cart is finalized. At that point, the order is now locked in and will fulfilled.
"""
type Order {
  """The address to use for billing purposes for this order."""
  billingAddress: Address

  """The cart context of this order."""
  cartContext: CartContext!

  """The date at which this order was created from a finalized cart."""
  createdDate: Date

  """
  The credit card used to pay for this order, if any. This may not be present if the user paid using some other form of payment, such as a gift card or store credit.
  """
  creditCard: CreditCard @deprecated(reason: "This field is not expressive enough to capture payments with other mechanisms. This field has been deprecated in favor of paymentMethod, which is more generic.")

  """
  The expected maximum arrival date of this order, if applicable. This will be deprecated as soon as this can be expressed in terms of package/shipment-level arrival dates.
  """
  expectedMaximumArrivalDate: Date @deprecated(reason: "This name ended up being somewhat confusing. Use `scheduled_arrival_date` instead.")

  """
  The guest token of this order. Used to identify the owner for orders which are not associated with an authenticated user.
  """
  guestToken: ID

  """The identifier of the order."""
  id: ID!

  """
  The line items contained in this order. May be empty if no line items are currently associated with this order. This is intended for cases where clients wish to present a view that does not care about shipment details.
  """
  lineItems: [LineItem!]!

  """
  The packages associated with this order, if any. This is provided as a utility for cases where clients want to access package level data without requesting shipments.
  """
  packages: [Package!]!

  """
  The payment method used to pay for this order, if any. This may be null if the user paid using some other form of payment, such as store credit.
  """
  paymentMethod: PaymentMethod

  """
  Pricing information for this order. Prices for orders represent the final pricing information that the user was charged.
  """
  price: OrderPrice!

  """
  The full Products associated with the line items of this order. This can be used by clients to render out full product details (including other possible variants, etc) when rendering the order details.
  """
  products: [Product!]!

  """
  The promotions which have been applied to this order, if any. May be empty if no promotions have been applied. Note that this should be considered display-only information - all computation of discounts should be handled through the OrderPrice model instead.
  """
  promotions: [AppliedPromotion!]!

  """
  Information about the scheduled arrival of this order. Note that the date is a rough approximation, since orders may contain shipments from multiple sources which may not arrive on the same day.
  """
  scheduledArrival: ScheduledArrival

  """
  The date this order is scheduled to arrive. Note that this is a rough approximation, since orders may contain shipments from multiple sources which may not arrive on the same day.
  """
  scheduledArrivalDate: Date

  """Shipments for this order, if any."""
  shipments: [Shipment!]!

  """The address this order will ship to."""
  shippingAddress: Address

  """
  Variants that are contained in this order. This is a simplification of line items - and should no longer be used.
  """
  variants: [ProductVariant!] @deprecated(reason: "This notion is not expressive enough to capture items with multiple quantities. This requires us to use line items instead.")
}

"""Represents an order in the ContentStream."""
type OrderCard implements ContentStreamCard {
  """This will always be nil for this type of card."""
  analyticsEvent: String

  """Priority with which to display this card."""
  displayPriority: Int!

  """
  The ID of this card. Note that clients should treat this as an opaque string.
  """
  id: ID!

  """The Order associated with this card."""
  order: Order!

  """The style used for the card."""
  style: ContentStreamCardStyle!

  """The title to use for this card."""
  title: String
}

"""The connection type for Order."""
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge]

  """A list of nodes."""
  nodes: [Order]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Order
}

"""Selectable options for order issue reporting."""
enum OrderIssueCategory {
  MISSING_DELIVERY
  DAMAGED_DELIVERY
  MISSING_ITEMS
  INGREDIENT_QUALITY
  SOMETHING_ELSE
}

"""The Order Issue Reporting form."""
type OrderIssueForm {
  """
  The section of the form that displays the user's most recent delivered orders.
  """
  recentOrders: [Order!]!
}

"""The input submitted by the user in the Order Issue Reporting form."""
input OrderIssueInput {
  """The unique identifier associated with the selected order."""
  orderId: ID

  """
  The unique identifier(s) associated with the selected order issue categories.
  """
  categories: [OrderIssueCategory!]!

  """The selected options describing the damaged delivery"""
  damagedItems: [DamagedDeliveryOption!]

  """The selected items missing from a recipe."""
  missingItems: [RecipeIssueInput!]

  """The selected ingredients with bad quality in a recipe."""
  ingredientQualityIssues: [RecipeIssueInput!]

  """Free text entered by the user to describe the order issue."""
  freeText: String
}

type OrderIssueSubmissionResult {
  """
  The message rendered to the client after Order Issue Reporting form submission.
  """
  message: String!
}

"""
Input to identify the owner of the order. This is generally used when the context of the request itself is insufficient to identify the owner accurately - e.g., in an unauthenticated request for guest checkout. If this object is used, at least one field must be provided.
"""
input OrderOwnerIdInput {
  """Guest token associated with the order."""
  guestToken: ID!
}

"""Pricing information for a cart or an order."""
type OrderPrice {
  """
  The amount of credit used to pay for this order, if any. Will be null if no credit is used for this order. Note that when estimating, credits may not be applied. This is returned as a positive value - clients may wish to render as negative depending on the experience.
  """
  credit: Money

  """
  The discount applied to the order, if any. Will be null if discount is not relevant to this order. Note that when estimating prices, we currently do not calculate discounts even if requested. This is returned as a positive value - clients may wish to render as negative depending on the experience.
  """
  discount: Money

  """
  Whether this price represents a firm price or only an estimate. This can be used by clients to adjust the language used for display.
  """
  estimated: Boolean

  """
  The disclaimer to display for an estimated price, if any. This will only be present if the price is estimated.
  """
  estimatedPriceDisclaimer: String

  """
  The original total amount of this order prior to any credits or discount. This represents how much the customer would have paid including tax and shipping, and is useful for strike-through experiences, etc.
  """
  originalTotal: Money!

  """
  The price of shipping for this order. If shipping is not relevant, will be null.
  """
  shipping: Money

  """
  The total price of all the variants in the order. Note that this does not include any adjustments.
  """
  subtotal: Money!

  """
  Any relevant taxes are included here. If taxes do not apply to this order, may be null.
  """
  tax: Money

  """
  The final price the user will end up being charged. Includes all adjustments/etc made to the order price.
  """
  total: Money!
}

"""
A package within a Shipment. Packages represent a collection of goods being shipped from a single source location to a user with a single arrival date.
"""
type Package {
  """Detailed arrival information for this package, if known."""
  arrival: PackageArrival

  """The ID of the package."""
  id: ID!

  """The line items contained in this package, if any."""
  lineItems: [LineItem!]!

  """The state of this package."""
  state: PackageState!

  """The tracking number for this package, if available."""
  trackingNumber: String

  """The tracking URL for this package, if available."""
  trackingUrl: Url
}

"""
Arrival information for a package. This information can be used to help users understand details about their packages and when to expect them.
"""
type PackageArrival {
  """Client-facing string about when to expect this delivery."""
  description: String

  """
  Date this package is expected to arrive, if known. This is currently only populated for packages from scheduled orders.
  """
  scheduledDate: String
}

"""The state of a package."""
enum PackageState {
  """The package has been delivered to the destination."""
  DELIVERED

  """
  The package is still being processed and is not ready for shipping just yet.
  """
  PENDING

  """
  The package has been shipped to the destination. Note that ba.com orders currently do not correctly report this status.
  """
  SHIPPED
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Input for filtering a past orders query."""
input PastOrdersFilterInput {
  """Context for the cart from which the orders were created."""
  cartContext: CartContext!
}

"""
The length of time for an account pause, as defined by the quantity of timeUnit.
"""
type PauseDuration {
  """The display value for the quantity in time units."""
  displayText: String!

  """The quantity of time units during which the pause is active."""
  quantity: Int!

  """The unit of time to associate with the quantity."""
  timeUnit: TimeUnit!
}

"""Input specifying the duration of a pause on a subscription."""
input PauseDurationInput {
  """The pause duration in time units."""
  quantity: Int!

  """The unit of time to use with the quantity."""
  timeUnit: TimeUnit!
}

"""Input for pausing a subscription."""
input PauseSubscriptionInput {
  """The subscription to pause."""
  subscriptionId: ID!

  """The duration of the pause to apply."""
  pauseDuration: PauseDurationInput!
}

"""Autogenerated return type of PauseSubscription."""
type PauseSubscriptionPayload {
  clientErrors: [ClientError!]

  """The duration of the activated pause."""
  pauseDuration: PauseDuration

  """The subscription which has been paused."""
  subscription: Subscription
}

"""
Representation of a form of payment. Payment methods can come from a variety of sources. The most common in our current setup would be a credit card, but we will potentially support other forms of payment in the future, such as Stripe Link or Paypal, etc.
"""
type PaymentMethod {
  """
  The credit card details for this payment method, if any. This will only be provided if the payment method actually represents a credit card.
  """
  creditCardDetails: CreditCard

  """
  The user-facing name to use to identify this payment method. For example, this might look like "Visa ending in 1234". Clients should make no assumptions about the structure of this value.
  """
  displayName: String!

  """The type of this payment method."""
  type: PaymentMethodType!
}

"""
The type of a given PaymentMethod. Clients may need this in order to render the appropriate details for a payment method.
"""
enum PaymentMethodType {
  """A payment method backed by Apple Pay."""
  APPLE_PAY

  """A payment method backed by a credit card."""
  CREDIT_CARD

  """A payment method backed by Google Pay."""
  GOOGLE_PAY

  """A payment method backed by Stripe Link."""
  STRIPE_LINK
}

"""
Representation of a person's name, broken down semantically to allow clients to choose their preferred forms of display.
"""
type PersonName {
  """
  The family name of the person, if known.  Do not construct a full name by appending family and given names - use the full name field instead.
  """
  family: String

  """The full name of the person. Always present."""
  full: String!

  """
  The given name of the person, if known. Do not construct a full name by appending family and given names - use the full name field instead.
  """
  given: String
}

"""Input to update user's name."""
input PersonNameInput {
  """The given name of the person."""
  given: String

  """The family name of the person."""
  family: String

  """The full name of the person."""
  full: String
}

"""
Basic representation of a product in the Blue Apron ecosystem. A Product contains multiple ProductVariants - the Product is the idealized version of the thing, while the Variant represents a particular item that we can sell. Products define which axes they are allowed to vary in by defining ProductVariables. These are then used to identify particular Variants within the coordinate space of the Product itself.
"""
type Product {
  """
  Unique identifier of this product in the Product Catalog.This should be treated as opaque by the client.
  """
  catalogCode: ID!

  """
  The priority with which to display this product. This is used to determine the order in which products should be displayed when rendering collections which are not explicitly ordered otherwise. This is in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """
  The type of this product. Can be used to make client side decisions about how to render this object to the user. All Variants of this product must have the same type by definition.
  """
  type: ProductType!

  """
  The variables that this product is allowed to vary across. These define the possible coordinate spaces for the variants of the product. Variants may *only* have values for variables associated with their product, and *must* define values for every variable.
  """
  variables: [ProductVariable!]!

  """
  The variants of this particular product. These represent the specific items that we can actually sell.
  """
  variants: [ProductVariant!]!
}

"""Availability information for a single product."""
type ProductAvailability {
  """
  What level of availability this product has. This is dependent on the context of the call that retrieved the product - in some queries, we are not able to fetch the availability of the product accurately. For now, this means that product availabilty information is only available as part of a menu query.
  """
  level: AvailabilityLevel!
}

"""
Representation of a category of products. This is intended to represent the a specific category that we sell products in, enabling clients to render a category-based display.
"""
type ProductCategory {
  """The user-visible description of this category, if any."""
  description: String

  """
  The priority with which to display this category. This is used to determine the order in which categories should be displayed when rendering collections which are not explicitly ordered otherwise. This is in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """
  The unique ID of the category. Can be used to query for the contents of the category in subsequent requests.
  """
  id: ID!

  """
  An Image to render when displaying this category. May be null if no image has been set by the server yet.
  """
  image: Image

  """The name of the product category. Suitable for display to clients."""
  name: String!

  """The type for this category. Root categories do not have a type."""
  type: ProductCategoryType
}

"""
Types of product categories that exist in our system. We have different categories that are used for different purposes. The type helps group these logically.
"""
enum ProductCategoryType {
  """Marketplace product collections."""
  COLLECTION

  """Marketplace product categories."""
  MARKET
}

"""The connection type for Product."""
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge]

  """A list of nodes."""
  nodes: [Product]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Product
}

"""Collection of various images associated with a product."""
type ProductImages {
  """
  Primary image for this product. This will always be present if the product has images - but not all products do.
  """
  primary: Image
}

"""
Display name for a Product. The main and sub fields are broken out separately to allow for easier client formatting.
"""
type ProductName {
  """The full name of the product."""
  full: String!

  """The main title of the product."""
  main: String!

  """The subtitle, if any, of the product."""
  sub: String
}

"""Possible types of products in the Blue Apron ecosystem."""
enum ProductType {
  """A generic product with no specific constraints."""
  MARKET

  """A single recipe."""
  RECIPE

  """A single bottle of wine."""
  WINE
}

"""A variable that a product can vary in."""
type ProductVariable {
  """
  The description of the variable, if any. This may be null if there is no relevant description for this particular variable.
  """
  description: String

  """The client-facing name of this variable."""
  displayName: String!

  """
  The internal name of this variable. Suitable for use in queries and logic, but should generally not be rendered to clients.
  """
  name: String!

  """The type of this variable."""
  type: ProductVariableType!
}

"""Possible types of ProductVariables allowed."""
enum ProductVariableType {
  """A generic type of variable with no specific business rules."""
  GENERIC

  """
  Variables that are required for some products - ie, recipe serving_size.
  """
  CORE

  """Variables which are used to drive customization display for clients."""
  CUSTOMIZATION
}

"""A value of a particular variable in the context of a variant."""
type ProductVariableValue {
  """The client-facing value of the variable."""
  displayValue: String!

  """
  The internal value. This may be used for calculation or logic as needed, but should generally not be displayed to clients.
  """
  value: String!

  """The variable that this value is associated with."""
  variable: ProductVariable!
}

"""
A ProductVariant represents a particular thing that we can sell. Every recipe, wine, or marketplace item that we as a business sell is a variant - and they are uniquely identified by a SKU.
"""
interface ProductVariant {
  """Availability information for this variant."""
  availability: ProductAvailability!

  """
  Badges attached to this variant. May be null if there are no relevant badges.
  """
  badges: [Badge!]

  """
  Whether or not this variant is considered core for this product. Products always have at least one core variant, but may have multiple. For example, a recipe may have a core variant for each serving size supported.
  """
  core: Boolean!

  """Description of the variant."""
  description: String!

  """
  Human-readable pricing info for this variant. Includes metadata for conditional styling.
  """
  displayPrice: VariantDisplayPrice

  """
  The priority with which to display this variant within the context of the parent product. Note that this should not be confused with the display priority of the product itself, which controls ordering of the product in lists. This is in ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """An array of features enabled for the product variant."""
  features: [ProductVariantFeature!]!

  """
  Collection of images for this variant. May not be present if the variant hasn't been assigned any images yet.
  """
  images: ProductImages

  """Naming information for this variant."""
  name: ProductName!

  """
  Pricing information for this variant. Note that this may not be the price a user will actually pay for the variant. In the context of a Cart or an Order, clients should refer to LineItem.price instead.
  """
  price: VariantPrice

  """
  The globally unique SKU of the variant. The exact format here should never be relied on, and the value should be treated as opaque to clients.
  """
  sku: ID!

  """
  Tags applied to this variant. Tags are intended for logical operations on the client, such as filtering or grouping. These should never be displayed to users. The set of possible tags in non-deterministic, so specific tag values may appear and disappear over time.
  """
  tags: [String!]!

  """
  This represents the logical number of units in the variant, which is often used for pricing or other concerns. For example, a recipe might have a unit count of 2 to indicate that there are two portions, which is distinct from the number of nutritional servings.
  """
  unitCount: Int

  """The URL for the details page of this variant."""
  url: Url!

  """
  User-specific information associated with this variant if present. These fields tend to be expensive, so clients should query with care.
  """
  userInfo: VariantUserInfo

  """
  The values of the product variables for this particular variant. These logically define the variant's position in the coordinate system defined by the parent product. These values are what differentiate one variant from another, and can be used to drive displays in the UI.
  """
  variableValues: [ProductVariableValue!]!
}

"""A supported feature for a particular product variant."""
enum ProductVariantFeature {
  """The product variant is compatible with the cook along feature."""
  COOK_ALONG
}

type QueryRoot {
  """
  Retrieve a list of active carts. An active cart is one that has not been completed and can still be modified. If no such carts exist for the specified parameters, the returned list will be empty.
  """
  activeCarts(
    """
    Context of the carts to fetch. Note that currently, this is only supported for Agora-powered carts (GIFT_CARD and MARKET).
    """
    cartContext: CartContext!

    """
    Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
    """
    ownerId: CartOwnerIdInput
  ): [Cart!]!

  """Retrieves the available delivery dates for a particular cart."""
  availableDeliveryDates(
    """ID of the cart to fetch delivery dates for."""
    cartId: ID!

    """
    Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
    """
    ownerId: CartOwnerIdInput

    """
    Optional address information. This should be provided if the user is changing the address of the cart, because the available delivery days may vary based on address.
    """
    overrideAddress: AddressInput
  ): [DeliveryDate!]

  """Retrieve any active badges that meet the specified filter."""
  badges(
    """
    Filter indicating which badges to return. Note that if a filter is not provided, all active badges will be returned to the client.
    """
    filter: BadgeFilterInput
  ): [Badge!]!

  """
  Retrieve a single cart by ID. If the requested cart cannot be found, will return null.
  """
  cart(
    """ID of the cart to fetch."""
    id: ID!

    """
    Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
    """
    ownerId: CartOwnerIdInput
  ): Cart

  """Represents the configuration of dynamic state for clients."""
  configuration(
    """The type of app to fetch configuration for."""
    appType: AppType!
  ): Configuration!

  """
  Retrieve a stream of content of a specified context. This is used to render genericly structured data to our clients - for example, a stream of blog articles or a set of product cards. Streams are requested by a stream type and a version. If the requested stream does not exist, the return value will be nil. Note that for now, we don't support pagination of streams.
  """
  contentStream(
    """The context of the stream to fetch."""
    context: ContentStreamContext!

    """
    Stream versions are opaque identifiers representing a particular version of the stream. These version keys are communicated out-of-band to clients who then request the appropriate stream. A new version should be introduced when the stream changes in ways that are not compatible with older clients - ie, uses new functionality, or requires other client changes.
    """
    version: ID!
  ): ContentStream

  """Retrieve the credit balance information for the provided user."""
  creditBalance: CreditBalance!

  """
  Retrieve a list representing a user's meal preferences. If we are unable to determine a user's preferences, the result will be null.
  """
  mealPreferences: [MealPreference!]

  """
  Retrieve a menu given the relevant ID. If the provided ID does not correspond to an available menu, the result will be null.
  """
  menu(
    """The ID of the desired menu."""
    id: ID!

    """
    An optional ID for a cart. This is used to provide context for product availability and address information.
    """
    cartId: ID
  ): Menu

  """
  Retrieve a collection of menu sets based on a provided filter. The resulting collection will never be null, but may be empty.
  """
  menuSets(
    """The filter to use for retrieving menus."""
    filter: MenuSetFilterInput!
  ): [MenuSet!]!

  """
  Retrieve a collection of menus based on a provided filter. The resulting collection will never be null, but may be empty.
  """
  menus(
    """The filter to use for retrieving menus."""
    filter: MenuFilterInput!
  ): [Menu!]!

  """
  Retrieve an order by ID. If the requested order is not found, will return null.
  """
  order(
    """Order ID to fetch."""
    id: ID!

    """
    Optional identifier of the logical owner of the order. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
    """
    ownerId: OrderOwnerIdInput
  ): Order

  """The Order Issue Reporting form."""
  orderIssueForm: OrderIssueForm!

  """
  A paginated connection of "past" (ie, already delivered) orders in descending order by delivery date. So `first: 2` would return a connection with the two most recently delivered orders as nodes within containing edges.
  """
  pastOrders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The filter to apply to past orders."""
    filter: PastOrdersFilterInput!
  ): OrderConnection!

  """
  Retrieve a product given a catalog code. If the code doesn't correspond to a known product, the result will be null.
  """
  product(
    """The catalog code of the desired product."""
    code: ID!
  ): Product

  """Retrieve the categories for the requested CategoryType."""
  productCategories(
    """The type of product category to fetch."""
    type: ProductCategoryType!
  ): [ProductCategory!]!

  """
  Retrieve a list of products in the specified category. If there are no products in the category, the list will be empty. Note that the order of the returned products matters here.
  """
  products(
    """The ID of the category to fetch products for."""
    categoryId: ID!
  ): [Product!]

  """
  Given SKUs of variants, retrieve the corresponding Product objects. This is generally useful when the client has incomplete product information from some other part of the API, and needs more of the full product structure to render an experience. Note that the number of products returned here is NOT the same as the number of SKUs provided - if multiple SKUs are associated with the same product, the product will only be returned once in output.
  """
  productsFromSkus(
    """List of variant SKUs to retrieve Products for."""
    skus: [ID!]!
  ): [Product!]

  """Retrieves saved products for current user."""
  savedProducts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter indicating which products to include."""
    productFilter: SavedProductFilterInput!
  ): ProductConnection

  """
  Detailed view of an entry in the upcoming schedule for user. This can be null if the ID does not correspond to a valid page.
  """
  schedulePageDetail(
    """The id of the schedule page."""
    id: ID!
  ): SchedulePageDetail

  """
  Upcoming schedule as a series of pages. This could potentially be an empty array.
  """
  schedulePages(
    """The filters to fetch schedule pages with."""
    filter: SchedulePageFilterInput!
  ): [SchedulePage!]!

  """Retrieves the available shipping rates for a particular shipment."""
  shippingRatesForShipment(
    """ID of the shipment to fetch shipping rates for."""
    shipmentId: ID!

    """
    Optional identifier of the logical owner of the shipment. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
    """
    ownerId: CartOwnerIdInput

    """
    Optional address information. This should be provided if the user is changing the address of the shipment, because the available shipping rates may vary based on address.
    """
    overrideAddress: AddressInput
  ): [ShippingRate!]!

  """Retrieves the available shipping rates for a particular subscription."""
  shippingRatesForSubscription(
    """ID of the subscription to fetch shipping rates for."""
    subscriptionId: ID!

    """
    Optional address information. This should be provided if the user is changing the address of the subscription, because the available shipping rates may vary based on address.
    """
    overrideAddress: AddressInput
  ): [ShippingRate!]!

  """All sous chef menus, temporary for testing and learning."""
  sousChefMenus(
    """An optional menu state to filter Sous Chef menus by."""
    state: SousChefMenuState
  ): [SousChefMenu!]

  """
  Retrieve details about options for pausing a subscription described by a filter.
  """
  subscriptionPauseDetails(
    """The filter to user for retrieving pause options."""
    filter: SubscriptionPauseFilterInput!
  ): SubscriptionPauseDetails

  """
  Retrieve the currently signed in user's account information. If there is no logged in user, this will return a hash indicating credentials are invalid.
  """
  user: User!

  """Retrieve a list representing a user's invites."""
  userInvites: [UserInvite!]!

  """Retrieve an object representing a user's tracking preferences."""
  userTrackingPreferences: UserTrackingPreferences!

  """
  Retrieve a specified variant, if possible. This is useful for cases where clients already have the required metadata about the Product object and simply need additional details about the relevant Variant. For other use cases, consider using productsFromSkus.
  """
  variant(
    """The SKU to fetch Variant details for."""
    sku: ID!
  ): ProductVariant

  """
  Retrieve inventory information for a given variant. This is used to fetch specific data where liveness matters. If the information cannot be retrieved, the data will be null. This means the inventory status cannot accurately be determined.
  """
  variantInventory(
    """The SKU of the variant to fetch inventory for."""
    sku: ID!
  ): VariantInventory
}

"""
Input specifying the rating values and variant for a new rating. A value must be provided for either rating, comment, or both.
"""
input RateVariantInput {
  """A comment to associate with the rating."""
  comment: String

  """The number value of the rating from 1 to 5."""
  rating: Int

  """SKU of the variant."""
  sku: ID!
}

"""Autogenerated return type of RateVariant."""
type RateVariantPayload {
  clientErrors: [ClientError!]

  """The variant which has been rated."""
  variant: ProductVariant
}

"""Input for reactivating a subscription."""
input ReactivateSubscriptionInput {
  """The ID of the subscription to update."""
  subscriptionId: ID!

  """
  Additional options to change properties of the subscription while reactivating. If not provided, the subscription will be reactivated as-is.
  """
  updateOptions: SubscriptionOptionsInput
}

"""Autogenerated return type of ReactivateSubscription."""
type ReactivateSubscriptionPayload {
  clientErrors: [ClientError!]

  """The updated subscription."""
  subscription: Subscription
}

"""
Representation of a recipe in Blue Apron's system. Recipes are ProductVariants, so they include all the available variant data. But they also have specialized attributes which are unique to recipes.
"""
type Recipe implements ProductVariant {
  """Availability information for this variant."""
  availability: ProductAvailability!

  """
  Badges attached to this variant. May be null if there are no relevant badges.
  """
  badges: [Badge!]

  """
  Whether or not this variant is considered core for this product. Products always have at least one core variant, but may have multiple. For example, a recipe may have a core variant for each serving size supported.
  """
  core: Boolean!

  """Description of the variant."""
  description: String!

  """
  Human-readable pricing info for this variant. Includes metadata for conditional styling.
  """
  displayPrice: VariantDisplayPrice

  """
  The priority with which to display this variant within the context of the parent product. Note that this should not be confused with the display priority of the product itself, which controls ordering of the product in lists. This is in ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """An array of features enabled for the product variant."""
  features: [ProductVariantFeature!]!

  """
  Collection of images for this variant. May not be present if the variant hasn't been assigned any images yet.
  """
  images: ProductImages

  """
  Ingredients for this recipe, if any. This array may be empty if the recipe has no visible ingredients.
  """
  ingredients: [RecipeIngredient!]!

  """Naming information for this variant."""
  name: ProductName!

  """Nutritional information for this recipe."""
  nutritionInfo: NutritionInfo!

  """
  Pricing information for this variant. Note that this may not be the price a user will actually pay for the variant. In the context of a Cart or an Order, clients should refer to LineItem.price instead.
  """
  price: VariantPrice

  """Additional recipe-specific images."""
  recipeImages: RecipeImages!

  """
  The globally unique SKU of the variant. The exact format here should never be relied on, and the value should be treated as opaque to clients.
  """
  sku: ID!

  """
  Steps for this recipe, if any. This array may be empty if the recipe has no visible steps.
  """
  steps: [RecipeStep!]!

  """
  Tags applied to this variant. Tags are intended for logical operations on the client, such as filtering or grouping. These should never be displayed to users. The set of possible tags in non-deterministic, so specific tag values may appear and disappear over time.
  """
  tags: [String!]!

  """Timing information for this recipe."""
  times: RecipeTimes!

  """
  This represents the logical number of units in the variant, which is often used for pricing or other concerns. For example, a recipe might have a unit count of 2 to indicate that there are two portions, which is distinct from the number of nutritional servings.
  """
  unitCount: Int

  """The URL for the details page of this variant."""
  url: Url!

  """
  User-specific information associated with this variant if present. These fields tend to be expensive, so clients should query with care.
  """
  userInfo: VariantUserInfo

  """
  The values of the product variables for this particular variant. These logically define the variant's position in the coordinate system defined by the parent product. These values are what differentiate one variant from another, and can be used to drive displays in the UI.
  """
  variableValues: [ProductVariableValue!]!
}

"""
Specialized images for recipes. These are images that have particular semantic meanings specifically for Recipe objects.
"""
type RecipeImages {
  """An image depicting the ingredients of a recipe, if applicable."""
  ingredients: Image

  """The main dish of the recipe."""
  mainDish: Image

  """
  A square crop version of the main dish. Used for square aspect ratio design elements.
  """
  square: Image
}

"""Indidvidual ingredients used in recipes."""
type RecipeIngredient {
  """
  The number of ingredient units used in this recipe, e.g. 1/4. Clients should not assume this value is purely numeric.
  """
  amount: String!

  """The name of this recipe ingredient, e.g., "honey"."""
  description: String!

  """
  The client-facing name of this recipe ingredient, e.g. "2 Tablespoons Honey". Note that units are not abbreviated here.
  """
  displayName: String!

  """
  The priority with which to display this ingredient. Ingredients should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """Unique identifier of this recipe ingredient."""
  id: ID!

  """
  The units of measurement for this ingredient, e.g., "tbsps", if any. Some ingredients do not have a relevant unit as part of their display, in which case this value is null.
  """
  unit: String
}

"""Input to represent the issues with the ingredients of a recipe."""
input RecipeIssueInput {
  """The sku identifier associated with the selected recipe."""
  sku: ID!

  """The unique identifier(s) associated with selected ingredient(s)."""
  ingredientIds: [ID!]!
}

"""A step of a recipe."""
type RecipeStep {
  """The image associated with this step, if any."""
  image: Image

  """This step's position in the overall sequence of steps."""
  number: Int!

  """The actual detailed text of the step describing what to do."""
  text: String!

  """The one-line title of the step."""
  title: String!
}

"""Timing information for a recipe."""
type RecipeTimes {
  """
  Overall time range information for the recipe. Includes the time needed to prepare and actually cook.
  """
  overall: TimeRange!
}

"""
Configuration for the invite referral program. This controls what information is displayed to clients about our referral program.
"""
type ReferralConfig {
  """Whether or not the referral incentive program is active for the user."""
  enabled: Boolean!

  """URL for the referral terms and conditions link."""
  termsUrl: Url!

  """The amount of the referral incentive in USD."""
  value: Money!
}

input RemoveVariantsFromCartInput {
  cartId: ID!
  variants: [VariantQuantityInput!]!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of RemoveVariantsFromCart."""
type RemoveVariantsFromCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""
Representation of a user's earned rewards. Contains information about the various details of the user's rewards.
"""
type RewardEarnings {
  """
  The amount the user has earned over their lifetime. This includes credit that has already been used.
  """
  incentiveCreditEarned: Money!
}

input SaveVariantInput {
  """The SKU of the variant to save."""
  sku: ID!
}

"""Autogenerated return type of SaveVariant."""
type SaveVariantPayload {
  clientErrors: [ClientError!]
  variant: ProductVariant
}

"""Filter allowing clients to select which products are included."""
input SavedProductFilterInput {
  """
  The product type allows the client to select the type of product to return for user.
  """
  productType: ProductType!
}

"""Represents an entry in the upcoming schedule for a user."""
type SchedulePage {
  """The CartContext this page is associated with."""
  cartContext: CartContext!

  """
  The date associated with this page, if any. Future updates may allow pages to exist that do not correspond directly to a single date.
  """
  date: Date

  """The label to display for this SchedulePage."""
  displayLabel: String!

  """
  The priority with which to display this schedule page. Schedule pages should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """The ID of this SchedulePage."""
  id: ID!

  """
  The date associated with the menu for this page, if any. Note that this is different from the date attribute, which reflects the actual date of the relevant schedule entries. For instance, if a page corresponds to a cart for a Wednesday food delivery, the date would be that Wednesday, while the menu_date attribute would be the Monday of that week. Also note that this field may not always be present.
  """
  menuDate: Date

  """The ID of the SchedulePageDetail associated with this page."""
  pageDetailId: ID!

  """The status of this schedule page."""
  status: SchedulePageStatus!
}

"""Detailed view of an entry in the upcoming schedule for user."""
type SchedulePageDetail {
  """
  The Cart associated with this SchedulePage, if any. At most one of a Cart or an Order will be present.
  """
  cart: Cart

  """The ID of the menu to set as the default selected menu, if any."""
  defaultMenuId: ID

  """The ID of this page detail object."""
  id: ID!

  """The MenuSets associated with this SchedulePage."""
  menuSets: [MenuSet!]

  """Modifications that have been applied to this page."""
  modifications: [SchedulePageModification!]!

  """
  The Order associated with this SchedulePage, if any. At most one of a Cart or an Order will be present.
  """
  order: Order

  """The status of this schedule page."""
  status: SchedulePageStatus!
}

"""Options for fetching schedule pages."""
input SchedulePageFilterInput {
  """The cart contexts for which to fetch schedule pages."""
  contexts: [CartContext!]!
}

"""Represents a modification that has been applied by the system."""
type SchedulePageModification {
  """Any messages that are associated with this modification."""
  message: String

  """The enumerated type of modification that this represents."""
  type: SchedulePageModificationType!
}

"""The possible modifications applied by the system."""
enum SchedulePageModificationType {
  """This is a generic modification type which includes cancellation."""
  GENERIC

  """A desired variant was removed because of being sold out."""
  FLEXED_BY_SELL_OUT

  """Desired variants could not be assigned due to restrictions."""
  FLEXED_BY_RESTRICTION
}

"""The status of a SchedulePage"""
enum SchedulePageStatus {
  """
  The page is considered scheduled. This is the default state for a schedule page.
  """
  SCHEDULED

  """
  The page is considered suspended, which happens if there is nothing coming to the user.
  """
  SUSPENDED

  """The page is considered modified."""
  MODIFIED

  """
  The page is considered paused, which happens if there is nothing coming to the user.
  """
  PAUSED
}

"""The possible states for a scheduled cart."""
enum ScheduleState {
  """The scheduled cart failed for whatever reason."""
  FAILED

  """A scheduled cart that is paused for this cycle."""
  PAUSED

  """
  A scheduled cart that can no longer be modified and is preparing to ship.
  """
  PREPARING

  """A scheduled cart that was refunded."""
  REFUNDED

  """A scheduled cart that is scheduled for a future cycle"""
  SCHEDULED

  """A scheduled cart that has shipped."""
  SHIPPED

  """A scheduled cart that has been suspended for whatever reason."""
  SUSPENDED
}

"""Information regarding a cart's scheduled arrival."""
type ScheduledArrival {
  """Arrival date associated with this cart."""
  date: Date!

  """The user-visible description of this scheduled arrival."""
  description: String
}

"""Input object to select shipping rates for a given cart."""
input SelectShippingRatesForCartInput {
  """The ID of the cart to update."""
  cartId: ID!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput

  """
  The selected rates for shipments in this cart. Not all shipments of the cart must be included here - clients can set rates on subsets of shipments as needed. All shipments must have a selected shipping rate before the cart can progress through checkout, however.
  """
  selectedShippingRates: [SelectedShippingRateInput!]!
}

"""Autogenerated return type of SelectShippingRatesForCart."""
type SelectShippingRatesForCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input object for selecting a shipping rate for a given shipment."""
input SelectedShippingRateInput {
  """The ID of the shipment to select a rate for."""
  shipmentId: ID!

  """The ID of the desired shipping rate."""
  shippingRateId: ID!
}

input SetCartVariantsInput {
  cartId: ID!
  variants: [VariantQuantityInput!]!
}

"""Autogenerated return type of SetCartVariants."""
type SetCartVariantsPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input type for setting a date for a cart."""
input SetDeliveryDayForCartInput {
  """The ID of the cart to update."""
  cartId: ID!

  """The ID of the DeliveryDay to select for the cart."""
  deliveryDayId: ID!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of SetDeliveryDayForCart."""
type SetDeliveryDayForCartPayload {
  """The cart that was updated."""
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input for setting a delivery day for subscription."""
input SetDeliveryDayForSubscriptionInput {
  """The ID of the subscription to adjust."""
  subscriptionId: ID!

  """The ID of the DeliveryDay to select for the subscription."""
  deliveryDayId: ID!
}

"""Autogenerated return type of SetDeliveryDayForSubscription."""
type SetDeliveryDayForSubscriptionPayload {
  clientErrors: [ClientError!]

  """The updated subscription object."""
  subscription: Subscription
}

"""Input object to set gift info on a cart."""
input SetGiftInfoForCartInput {
  """The ID of the cart to update."""
  cartId: ID!

  """The gift information."""
  giftInfo: GiftInfoForCartInput!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput
}

"""Autogenerated return type of SetGiftInfoForCart."""
type SetGiftInfoForCartPayload {
  """The cart the user has updated, if any."""
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input object to set cart payment information."""
input SetPaymentInfoForCartInput {
  """The address to use as a billing address for this cart."""
  billingAddress: AddressInput

  """The ID of the cart to update."""
  cartId: ID!

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput

  """
  Verification token from Recaptcha check. This is required in certain environments.
  """
  recaptchaToken: String

  """
  The ID of a PaymentMethod obtained via the Stripe client SDKs. If not provided, and the request is authenticated, the request will use the user's default payment method, if any. If no valid payment method can be found, an error will be returned.
  """
  stripePaymentMethodId: String
}

"""Autogenerated return type of SetPaymentInfoForCart."""
type SetPaymentInfoForCartPayload {
  """The cart the user has updated, if any."""
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input object to set cart shipping information."""
input SetShippingInfoForCartInput {
  """The ID of the cart to update."""
  cartId: ID!

  """
  The ID of the DeliveryDay to select for the cart, if any. This is only necessary when changing the desired arrival day of the cart. This field will soon be deprecated in favor of selected_shipping_rates.
  """
  deliveryDayId: ID

  """
  Optional identifier of the logical owner of the cart. This may ONLY be provided if the request is otherwise unauthenticated. This is primarily useful for guest checkout experiences.
  """
  ownerId: CartOwnerIdInput

  """The address to use as a shipping address for this cart."""
  shippingAddress: AddressInput!

  """The selected shipping rates for shipments in this cart."""
  selectedShippingRates: [SelectedShippingRateInput!]
}

"""Autogenerated return type of SetShippingInfoForCart."""
type SetShippingInfoForCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input for setting shipping info for subscription."""
input SetShippingInfoForSubscriptionInput {
  """
  The ID of the DeliveryDay to select for the subscription, if any. This is only necessary when changing the desired arrival day of the subscription.
  """
  deliveryDayId: ID

  """The address to use as a shipping address for this subscription."""
  shippingAddress: AddressInput!

  """The ID of the ShippingRate to select for the subscription, if any."""
  shippingRateId: ID

  """The ID of the subscription to adjust."""
  subscriptionId: ID!
}

"""Autogenerated return type of SetShippingInfoForSubscription."""
type SetShippingInfoForSubscriptionPayload {
  clientErrors: [ClientError!]

  """The subscription that was updated."""
  subscription: Subscription
}

"""Input for setting a Shipping Rate for subscription."""
input SetShippingRateForSubscriptionInput {
  """The ID of the subscription to adjust."""
  subscriptionId: ID!

  """The ID of the ShippingRate to select for the subscription."""
  shippingRateId: ID!
}

"""Autogenerated return type of SetShippingRateForSubscription."""
type SetShippingRateForSubscriptionPayload {
  clientErrors: [ClientError!]

  """The updated subscription object."""
  subscription: Subscription
}

"""
A shipment within a Cart or an Order. Shipments represent a collection of goods being shipped from a single source location to a user. Shipments may contain multiple packages with different arrival dates.
"""
type Shipment {
  """The ID of the shipment."""
  id: ID!

  """
  The line items contained in this shipment, if any. This is really a convenience wrapper around the line items in all the packages of the shipment. This is useful for cases where the packages don't exist, such as in Carts, or where the details of the packages are not relevant to the experience.
  """
  lineItems: [LineItem!]!

  """
  The packages contained in this shipment, if any. Shipments for orders will generally contain at least one package. Note that packages are not stable and may shift as the contents of the shipment are fulfilled. Packages may appear or disappear as needed to fulfill the items.
  """
  packages: [Package!]!

  """The currently selected shipping rate for this shipment, if any."""
  selectedShippingRate: ShippingRate

  """
  All available shipping rates for this shipment. Note that this array also included the selected rate.
  """
  shippingRates: [ShippingRate!]!

  """The state of this shipment."""
  state: ShipmentState
}

"""The state of a shipment."""
enum ShipmentState {
  """
  The shipment is not yet finalized. Should be a transient state for orders, which can happen if we create a new shipment after checkout.
  """
  PENDING

  """
  The shipment is ready to be fulfilled, but hasn't been sentto the partner yet.
  """
  READY

  """
  The shipment has been published to the relevant fulfillment partner and is waiting to be fulfilled.
  """
  PUBLISHED

  """All packages associated with this shipment have been shipped."""
  SHIPPED

  """The shipment and all associated packages have been canceled."""
  CANCELED
}

"""
Rate the user will pay for shipping. This is used to inform what guarantees the user is expecting when placing this order.
"""
type ShippingRate {
  """
  Arrival date associated with this rate, if any. Arrival dates are only provided if the shipping rate corresponds to selecting a single delivery day.
  """
  arrivalDate: Date

  """Whether or not the shipping rate is available"""
  available: Boolean!

  """The user-visible description of this shipping rate."""
  description: String

  """The user-visible name of this shipping rate."""
  displayName: String!

  """
  The priority with which to display the shipping rate. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """The ID of this shipping rate."""
  id: ID!

  """The shipping rate type of a shipment."""
  type: ShippingRateType!
}

"""Possible types of shipping rates of a shipment."""
enum ShippingRateType {
  """The shipment will be handled via courier."""
  COURIER

  """The shipment will be picked up by the customer."""
  PICKUP

  """The shipment will be handled via standard shipping."""
  SHIPPING
}

"""Line item with fields adhering to the QUD format."""
type SousChefLineItem {
  """
  The description of the item without quantities or units. i.e. "flour" or "spatula."
  """
  description: String!

  """
  Full display name for clients. i.e. ".25 cups flour" or "1 spatula."
  """
  name: String!

  """
  Quantity that can return fractional amounts. i.e. "0.25."
  """
  quantity: Float!

  """
  Unit for appropriate line items. i.e. "cups" or "bunch."
  """
  unit: String
}

"""Sous chef menu."""
type SousChefMenu {
  """Unique identifier."""
  id: ID!

  """Most recent time the menu was created or updated."""
  lastModified: Int!

  """The user-defined menu name."""
  name: String!

  """The minimum and maximum number of meals allowed to be added to a menu."""
  quantity: SousChefRecipeQuantityRange

  """List of items and associated quantities eeded to prepare the menu."""
  shoppingList: SousChefShoppingList

  """The menu state."""
  state: SousChefMenuState!

  """Recommended variants (recipes) for the user to add to the menu."""
  suggestions: [ProductVariant!]!

  """
  Collection of variants for the menu. For now, these should all be recipes.
  """
  variants: [ProductVariant!]!
}

"""Possible states of a Sous Chef menu."""
enum SousChefMenuState {
  """
  The menu that has been created by a user but never saved with a name and products.
  """
  INITIAL

  """The menu has been saved with a name and products."""
  COMPLETED
}

"""
The minimum and maximum number of recipes that can be added to a Sous Chef Menu.
"""
type SousChefRecipeQuantityRange {
  """
  The maximum number of recipes that can be associated with a sous chef menu.
  """
  max: Int!

  """
  The minimum number of recipes that can be associated with a sous chef menu.
  """
  min: Int!
}

"""
Manifest containing the name, quantity, and unit for every product needed to prepare a menu.
"""
type SousChefShoppingList {
  """
  Collection of  line items containing the quantity, unit, and description for each product in the manifest.
  """
  lineItems: [SousChefLineItem!]!
}

"""Dynamic configuration for Stripe."""
type StripeConfig {
  """
  API key for Stripe clients. This key has limited powers, so it is OK to embed in a client as needed.
  """
  publishableKey: String!
}

"""Autogenerated return type of SubmitOrderIssue."""
type SubmitOrderIssuePayload {
  clientErrors: [ClientError!]
  submissionResult: OrderIssueSubmissionResult
}

input SubmitVariantFeedbackInput {
  """
  The user rating for the variant, from 1 to 5. This is optional when providing detailed feedback.
  """
  rating: Int

  """The SKU of the variant to submit feedback for."""
  sku: ID!

  """
  The ID of the survey the user is answering questions from. This is required when submitting detailed feedback.
  """
  surveyId: ID!

  """
  The responses the user provided to the survey options. At least one response must always be provided when submitting feedback.
  """
  surveyResponses: [SurveyResponseInput!]!
}

"""Autogenerated return type of SubmitVariantFeedback."""
type SubmitVariantFeedbackPayload {
  clientErrors: [ClientError!]

  """
  The body of the message to display to the user, if any. Note that this string may include HTML formatting.
  """
  messageBody: String

  """The header of the message to display to the user, if any."""
  messageHeader: String

  """The updated variant for which feedback was provided."""
  variant: ProductVariant
}

"""Representation of a subscription in Blue Apron's system."""
type Subscription {
  """
  The cart context associated with this subscription. This indicates the context of carts generated for this subscription.
  """
  cartContext: CartContext!

  """The permanent delivery address associated with this subscription."""
  deliveryAddress: Address

  """The delivery day associated with this subscription."""
  deliveryDay: DeliveryDay

  """Any disclaimer information associated with this subscription."""
  disclaimers: SubscriptionDisclaimers!

  """The user-facing display name for this subscription."""
  displayName: String!

  """The ID of this subscription."""
  id: ID!

  """
  The next cart associated with this subscription that can be changed by the user.
  """
  nextChangeableCart: Cart

  """
  The date on which the pause will begin on this subscription, or null if not paused.
  """
  pauseBeginsOn: Date

  """
  The date on which the pause will end on this subscription, or null if not paused.
  """
  pauseEndsOn: Date

  """
  This will be true if there is a pause set now or in the future, or false if there is no upcoming or current pause.
  """
  pauseSet: Boolean!

  """The count of products the user will receive in each delivery."""
  productsPerDelivery: Int!

  """The current status of the subscription."""
  status: SubscriptionStatus!
}

"""
Disclaimers for a Subscription. Used to render information to a user in various contexts.
"""
type SubscriptionDisclaimers {
  """
  Disclaimer displayed for orders which are currently processing, if any. This is primarily intended to be used for cancelation or other broad subscription updates. This field is slightly expensive, because it requires looking up order information. So it should only be requested if needed.
  """
  processingOrders: String
}

"""Input representing options that can be set on a subscription."""
input SubscriptionOptionsInput {
  """
  The ID of the DeliveryDay to select for the subscription. If not provided, the existing value will remain unchanged.
  """
  deliveryDayId: ID

  """
  The ID of the plan to switch the subscription to. If not provided, the existing value will remain unchanged.
  """
  planId: ID

  """
  The desired count of products to receive with each delivery in this subscription. Note that if the plan changes and this value is not provided, the user will be defaulted to the lowest number of products that is acceptable for the new plan. Otherwise, if not provided, the existing value will remain unchanged.
  """
  productsPerDelivery: Int
}

"""Details about options for pausing a description."""
type SubscriptionPauseDetails {
  """Pause options for this subscription."""
  options: [SubscriptionPauseOption!]!

  """The date on which a pause would start for the given subscription."""
  startDate: Date!
}

"""Input to filter pause options for a subscription."""
input SubscriptionPauseFilterInput {
  """The subscription by which to filter."""
  subscriptionId: ID!
}

"""An option for pausing a subscription for a period of time."""
type SubscriptionPauseOption {
  """A description of this pause option."""
  description: String!

  """The duration during which the pause is active."""
  pauseDuration: PauseDuration!
}

"""Possible statuses of a subscription."""
enum SubscriptionStatus {
  """The subscription is currently paused."""
  PAUSED

  """The subscription is currently active."""
  ACTIVE

  """The subscription was previously active, but is not currently."""
  CANCELED

  """The subscription has never been active."""
  INCOMPLETE

  """The subscription is in an undefined state."""
  UNKNOWN
}

input SurveyResponseInput {
  """The ID of the survey option selected by the user."""
  optionId: ID!

  """The free-text response from the user, if any."""
  response: String
}

"""Input object for suspending a cart."""
input SuspendCartInput {
  """The ID of the cart to suspend."""
  cartId: ID!
}

"""Autogenerated return type of SuspendCart."""
type SuspendCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

type TimeRange {
  """
  Average amount of time in minutes. This may be null if average is not applicable to the use case. This is often true for older recipes, for example.
  """
  average: Int

  """
  Maximum amount of time in minutes. This may be null if the range is not constrained at the upper end.
  """
  max: Int

  """
  Minimum amount of time in minutes. This may be null if the range is not constrained at the lower end.
  """
  min: Int
}

"""A standard time unit to use when expressing duration."""
enum TimeUnit {
  """One unit is one week."""
  WEEK

  """One unit is one month."""
  MONTH
}

"""Input for unpausing a subscription."""
input UnpauseSubscriptionInput {
  """The subscription to unpause."""
  subscriptionId: ID!
}

"""Autogenerated return type of UnpauseSubscription."""
type UnpauseSubscriptionPayload {
  clientErrors: [ClientError!]

  """The subscription which has been unpaused."""
  subscription: Subscription
}

input UnsaveVariantInput {
  """The SKU of the variant to unsave."""
  sku: ID!
}

"""Autogenerated return type of UnsaveVariant."""
type UnsaveVariantPayload {
  clientErrors: [ClientError!]
  variant: ProductVariant
}

"""Input object for unsuspending a cart."""
input UnsuspendCartInput {
  """The ID of the cart to unsuspend."""
  cartId: ID!
}

"""Autogenerated return type of UnsuspendCart."""
type UnsuspendCartPayload {
  cart: Cart
  clientErrors: [ClientError!]
}

"""Input to enable or disable meal preferences by type."""
input UpdateMealPreferenceInput {
  """Type of meal preference, e.g., 'Wellness'."""
  type: MealPreferenceType!
  enabled: Boolean!
}

"""Autogenerated return type of UpdateMealPreferences."""
type UpdateMealPreferencesPayload {
  clientErrors: [ClientError!]
  mealPreferences: [MealPreference!]
}

"""
Input specifying the name and associated products for a Sous Chef menu. Note that providing including products will OVERRIDE the existing set of products for a menu.
"""
input UpdateMenuInput {
  menuId: ID!

  """Menu name"""
  name: String

  """
  Variant SKUs to associate with a menu. IMPORTANT: Note that providing values here will OVERRIDE all existing product associations for the menu
  """
  variantSkus: [ID!]
}

"""Autogenerated return type of UpdateSousChefMenu."""
type UpdateSousChefMenuPayload {
  clientErrors: [ClientError!]
  menu: SousChefMenu
}

"""Input for updating attributes of a subscription."""
input UpdateSubscriptionInput {
  """The options to apply to this subscription."""
  options: SubscriptionOptionsInput!

  """The ID of the subscription to update."""
  subscriptionId: ID!
}

"""Autogenerated return type of UpdateSubscription."""
type UpdateSubscriptionPayload {
  clientErrors: [ClientError!]

  """A message to display to the user confirming the update, if any."""
  confirmationMessage: String

  """The updated subscription."""
  subscription: Subscription
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload {
  clientErrors: [ClientError!]
  user: User
}

"""Input to opt in or out of tracking preferences."""
input UpdateUserTrackingPreferencesInput {
  """
  These cookies allow us to count visits and traffic sources. All information these cookies collect is aggregated and therefore anonymous.
  """
  performance: Boolean

  """
  These cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers.
  """
  functional: Boolean

  """
  These cookies may be set through our site by our advertising partners. They do not store directly personal information, but are based on uniquely identifying your browser and internet device.
  """
  targeted: Boolean

  """
  These cookies are set by a range of social media services that enable you to share our content with your friends and networks. They are capable of tracking your browser across other sites and building up a profile of your interests.
  """
  socialMedia: Boolean
}

"""Autogenerated return type of UpdateUserTrackingPreferences."""
type UpdateUserTrackingPreferencesPayload {
  clientErrors: [ClientError!]
  userTrackingPreferences: UserTrackingPreferences
}

"""A valid URL, transported as a String"""
scalar Url

"""Representation of a user in Blue Apron's system."""
type User {
  """
  The number of invitates this user has available to send, if any. A user might have no invites available because they've sent them all, or because they have not earned any invites yet.
  """
  availableInvites: Int!

  """
  The credit card saved by this user. If the user has no card stored, will be null.
  """
  creditCard: CreditCard @deprecated(reason: "This field is not expressive enough to capture payments with other mechanisms. This field has been deprecated in favor of paymentMethod, which is more generic.")

  """The email belonging to this user."""
  email: String!

  """Entitlements associated with this user, if any."""
  entitlements: [Entitlement!]!

  """The ID of this user."""
  id: ID!

  """Name of this user, if known."""
  name: PersonName

  """
  The payment method that this user has saved to make payments, if any. Will be null if the user has not configured a form of payment.
  """
  paymentMethod: PaymentMethod

  """Boolean indicating if the user has signed up for announcements."""
  receiveAnnouncements: Boolean!

  """
  The active subscriptions associated with this user. May be empty if the user has no active subscriptions.
  """
  subscriptions: [Subscription!]
}

"""Input to update user's account info."""
input UserAccountInfoInput {
  """User's name."""
  name: PersonNameInput

  """User's email."""
  email: String

  """Is a user signed up to recieve announcements."""
  receiveAnnouncements: Boolean
}

"""Representation of a user invite in Blue Apron's system."""
type UserInvite {
  """Boolean indicating if the user invite has been claimed."""
  claimed: Boolean!

  """Invite creation timestamp."""
  createdAt: DateTime!

  """The ID of the user invite."""
  id: ID!

  """
  The amount of the incentive given to the issuer when the recipient claims this invitation, if any. Note that not all invites are eligible for incentive rewards.
  """
  incentiveValue: Money

  """Invite redemption url."""
  inviteUrl: String!

  """Name of the invited user."""
  name: PersonName!
}

"""A representation of a user's tracking preferences."""
type UserTrackingPreferences {
  """
  These cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers.
  """
  functional: Boolean!

  """
  These cookies allow us to count visits and traffic sources. All information these cookies collect is aggregated and therefore anonymous.
  """
  performance: Boolean!

  """
  These cookies are set by a range of social media services that enable you to share our content with your friends and networks. They are capable of tracking your browser across other sites and building up a profile of your interests.
  """
  socialMedia: Boolean!

  """
  These cookies may be set through our site by our advertising partners. They do not store directly personal information, but are based on uniquely identifying your browser and internet device.
  """
  targeted: Boolean!
}

"""
A content stream card designed to display information about a particular Variant.
"""
type VariantCard implements ContentStreamCard {
  """
  The analytics event to fire when a user taps on this card, if any is defined.
  """
  analyticsEvent: String

  """
  The priority with which to display this card within the parent container. This is ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """
  The ID of this card. Note that clients should treat this as an opaque string.
  """
  id: ID!

  """The style to use when displaying this content card."""
  style: ContentStreamCardStyle!

  """The title of this card, if any."""
  title: String

  """The variant for this card. Must always be present."""
  variant: ProductVariant!
}

"""Human-readable pricing info for this variant."""
type VariantDisplayPrice {
  """
  Display price of this variant, e.g., "+$2.95/serving", "-$5.00", or "$12.99". Only returned if the price is intended to be displayed to users - otherwise will be null. Note that other fields may still be present in this case.
  """
  formattedPrice: String

  """
  Quantity of this variant, e.g., "10 oz." or "serves 2 to 4". Not all variants will have an associated quantity.
  """
  formattedQuantifier: String

  """
  Display price type provides a styling hint for clients since the formatted price is supposed to be treated as an opaque string.
  """
  priceType: DisplayPriceType
}

"""Inventory information for a variant."""
type VariantInventory {
  """Whether or not this variant can be backordered."""
  backorderable: Boolean!

  """
  Whether or not this variant can be directly ordered. If the variant is not in stock, but is backorderable, a user can still purchase it - but delivery may be delayed.
  """
  inStock: Boolean!
}

"""The pricing information for a particular Variant."""
type VariantPrice {
  """
  The unit price delta from the base price of other variants. Note that this does NOT represent a discount or price adjustment of this variant. Instead, it represents how much the unit price of this particular variant differs from other prices in a comparison. This is used to show additional upcharges for a premium variant, or a special price for a customization relative to the base variant of the same product, for example. Not all variants support a notion of delta pricing, so this may be null.
  """
  deltaUnit: Money

  """The original price of the variant, ignoring any discounts."""
  original: Money!

  """
  The unit price of the variant. For a recipe, this would represent the per-serving price of the recipe. Not all variants support unit prices, so this may be null.
  """
  unit: Money

  """
  Whether or not this price should be rendered to clients. By default, this is usually false. Only products with some sort of special pricing tend to need their pricing data displayed.
  """
  visible: Boolean!
}

"""
Input specifying the variant and the quantity. Used to manipulate the contents of carts.
"""
input VariantQuantityInput {
  """
  The previous quantity of this item the cart was expected to contain. This is used to ensure that clients can correctly modify variants by validating that they had the correct local state.
  """
  previousQuantity: Int

  """Desired quantity of the SKU."""
  quantity: Int!

  """SKU of the variant."""
  sku: ID!
}

"""User rating information for a particular Variant."""
type VariantRating {
  """An associated comment, if present."""
  comment: String

  """The number rating, from 1 to 5, if present."""
  rating: Int
}

"""
User-specific information for a particular Variant. These fields tend to be expensive, so clients should query with care.
"""
type VariantUserInfo {
  """The user rating for this variant, if present."""
  rating: VariantRating

  """Whether or not this variant has been saved by the user."""
  saved: Boolean!
}

"""Input object for verifying an account deletion request."""
input VerifyAccountDeletionInput {
  """Token used to verify account deletion request."""
  token: String!
}

"""Autogenerated return type of VerifyAccountDeletion."""
type VerifyAccountDeletionPayload {
  clientErrors: [ClientError!]
}

"""
Representation of a wine in Blue Apron's system. Wines are ProductVariants, so they include all the available variant data. But they also have specialized attributes which are unique to wines.
"""
type Wine implements ProductVariant {
  """The percent volume of alcohol in this wine."""
  alcoholByVolume: Float!

  """The appearance information for this wine."""
  appearance: WineAppearance!

  """Availability information for this variant."""
  availability: ProductAvailability!

  """
  Badges attached to this variant. May be null if there are no relevant badges.
  """
  badges: [Badge!]

  """Barrel and aging information for this wine."""
  barrel: String!

  """
  Volume of the bottle of wine. This is a formatted string containing the quantity and unit of this amount.
  """
  bottleVolume: String!

  """
  Whether or not this variant is considered core for this product. Products always have at least one core variant, but may have multiple. For example, a recipe may have a core variant for each serving size supported.
  """
  core: Boolean!

  """Description of the variant."""
  description: String!

  """
  Human-readable pricing info for this variant. Includes metadata for conditional styling.
  """
  displayPrice: VariantDisplayPrice

  """
  The priority with which to display this variant within the context of the parent product. Note that this should not be confused with the display priority of the product itself, which controls ordering of the product in lists. This is in ascending order - lower numbers should be displayed first.
  """
  displayPriority: Int!

  """The farming type for this wine."""
  farming: String

  """An array of features enabled for the product variant."""
  features: [ProductVariantFeature!]!

  """A message with fun facts, if any."""
  funFacts: String

  """
  Collection of images for this variant. May not be present if the variant hasn't been assigned any images yet.
  """
  images: ProductImages

  """Naming information for this variant."""
  name: ProductName!

  """A note about pairing with this wine, if any."""
  pairingNote: String

  """
  Pricing information for this variant. Note that this may not be the price a user will actually pay for the variant. In the context of a Cart or an Order, clients should refer to LineItem.price instead.
  """
  price: VariantPrice

  """Details about the taste profile of this wine."""
  profile: WineTasteProfile!

  """Information about the region associated with this wine."""
  region: WineRegion!

  """
  The globally unique SKU of the variant. The exact format here should never be relied on, and the value should be treated as opaque to clients.
  """
  sku: ID!

  """
  Tags applied to this variant. Tags are intended for logical operations on the client, such as filtering or grouping. These should never be displayed to users. The set of possible tags in non-deterministic, so specific tag values may appear and disappear over time.
  """
  tags: [String!]!

  """A message about tasting for this wine, if any."""
  tastingTip: String

  """
  This represents the logical number of units in the variant, which is often used for pricing or other concerns. For example, a recipe might have a unit count of 2 to indicate that there are two portions, which is distinct from the number of nutritional servings.
  """
  unitCount: Int

  """The URL for the details page of this variant."""
  url: Url!

  """
  User-specific information associated with this variant if present. These fields tend to be expensive, so clients should query with care.
  """
  userInfo: VariantUserInfo

  """
  The values of the product variables for this particular variant. These logically define the variant's position in the coordinate system defined by the parent product. These values are what differentiate one variant from another, and can be used to drive displays in the UI.
  """
  variableValues: [ProductVariableValue!]!

  """Varietals associated with this wine."""
  varietals: [WineVarietal!]!

  """Vineyard for this wine."""
  vineyard: String!

  """Vintage year for this particular wine."""
  vintage: String!

  """Additional wine-specific images."""
  wineImages: WineImages!
}

"""The appearance of a particular wine."""
type WineAppearance {
  """All colors in the category associated with this wine."""
  categoryColors: [ColorHex!]!

  """The name of the category to which this wine belongs."""
  categoryName: String!

  """A description of the appearance."""
  description: String!

  """
  The particular focus color for this wine. This value should lie in the category colors.
  """
  focusColor: ColorHex!
}

"""An aroma associated with a wine."""
type WineAroma {
  """
  The priority with which to display this aroma. Aromas should be displayed in ascending order - lower numbers here should display first.
  """
  displayPriority: Int!

  """An image associated with this aroma."""
  image: Image

  """Name of this aroma."""
  name: String!
}

"""
Specialized images for wines. These are images that have particular semantic meanings specifically for Wine objects.
"""
type WineImages {
  """Image focused on the bottle itself."""
  bottle: Image

  """Image with a more stylized depiction of the wine."""
  lifestyle: Image

  """The image to use for upcoming deliveries."""
  upcoming: Image
}

"""Region information for a wine."""
type WineRegion {
  """Description of the region."""
  description: String!

  """An image associated with this region."""
  image: Image

  """Name of the region."""
  name: String!
}

"""A particular attribute and its value for a wine profile."""
type WineTasteAttribute {
  """Description of this attribute."""
  description: String!

  """Name of this attribute."""
  name: String!

  """
  Value of this particular attribute in the possible range. The possible range is from 0 to 10. 
  """
  value: Int!
}

"""Properties associated with the taste profile of a particular wine."""
type WineTasteProfile {
  """The taste attribute value for acidity."""
  acidity: WineTasteAttribute!

  """Any aromas associated with this taste profile."""
  aromas: [WineAroma!]!

  """The taste attribute value for body."""
  body: WineTasteAttribute!

  """A description of this taste profile overall."""
  description: String!

  """The taste attribute value for sweetness."""
  sweetness: WineTasteAttribute!

  """The taste attribute value for tannins."""
  tannins: WineTasteAttribute!
}

"""A wine varietal."""
type WineVarietal {
  """Name of this varietal."""
  name: String!
}